{"ast":null,"code":"class TickerListener {\n  constructor(fn, context = null, priority = 0, once = false) {\n    this.next = null;\n    this.previous = null;\n    this._destroyed = false;\n    this.fn = fn;\n    this.context = context;\n    this.priority = priority;\n    this.once = once;\n  }\n  match(fn, context = null) {\n    return this.fn === fn && this.context === context;\n  }\n  emit(deltaTime) {\n    if (this.fn) {\n      if (this.context) {\n        this.fn.call(this.context, deltaTime);\n      } else {\n        this.fn(deltaTime);\n      }\n    }\n    const redirect = this.next;\n    if (this.once) {\n      this.destroy(true);\n    }\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  }\n  connect(previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  }\n  destroy(hard = false) {\n    this._destroyed = true;\n    this.fn = null;\n    this.context = null;\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n    const redirect = this.next;\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  }\n}\nexport { TickerListener };","map":{"version":3,"names":["TickerListener","constructor","fn","context","priority","once","next","previous","_destroyed","match","emit","deltaTime","call","redirect","destroy","connect","hard"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/ticker/src/TickerListener.ts"],"sourcesContent":["import type { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @returns Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n"],"mappings":"AAQO,MAAMA,cACb;EAyBIC,YAAYC,EAAuB,EAAAC,OAAA,GAAa,MAAMC,QAAW,MAAGC,IAAA,GAAO,KAC3E;IAtBA,KAAOC,IAAuB;IAE9B,KAAOC,QAA2B;IASlC,KAAQC,UAAa;IAYjB,KAAKN,EAAK,GAAAA,EAAA;IACV,KAAKC,OAAU,GAAAA,OAAA;IACf,KAAKC,QAAW,GAAAA,QAAA;IAChB,KAAKC,IAAO,GAAAA,IAAA;EAAA;EAUhBI,MAAMP,EAAuB,EAAAC,OAAA,GAAe,IAC5C;IACI,OAAO,IAAK,CAAAD,EAAA,KAAOA,EAAM,SAAKC,OAAY,KAAAA,OAAA;EAAA;EAS9CO,KAAKC,SACL;IACI,IAAI,KAAKT,EACT;MACI,IAAI,KAAKC,OACT;QACI,KAAKD,EAAG,CAAAU,IAAA,CAAK,IAAK,CAAAT,OAAA,EAASQ,SAAS;MAAA,CAGxC;QACK,KAA6BT,EAAA,CAAGS,SAAS;MAAA;IAC9C;IAGJ,MAAME,QAAA,GAAW,IAAK,CAAAP,IAAA;IAEtB,IAAI,KAAKD,IACT;MACI,KAAKS,OAAA,CAAQ,IAAI;IAAA;IAKrB,IAAI,KAAKN,UACT;MACI,KAAKF,IAAO;IAAA;IAGT,OAAAO,QAAA;EAAA;EAQXE,QAAQR,QACR;IACI,KAAKA,QAAW,GAAAA,QAAA;IAChB,IAAIA,QAAA,CAASD,IACb;MACIC,QAAA,CAASD,IAAA,CAAKC,QAAW;IAAA;IAE7B,KAAKD,IAAA,GAAOC,QAAS,CAAAD,IAAA;IACrBC,QAAA,CAASD,IAAO;EAAA;EAUpBQ,QAAQE,IAAA,GAAO,KACf;IACI,KAAKR,UAAa;IAClB,KAAKN,EAAK;IACV,KAAKC,OAAU;IAGf,IAAI,KAAKI,QACT;MACS,KAAAA,QAAA,CAASD,IAAA,GAAO,IAAK,CAAAA,IAAA;IAAA;IAG9B,IAAI,KAAKA,IACT;MACS,KAAAA,IAAA,CAAKC,QAAA,GAAW,IAAK,CAAAA,QAAA;IAAA;IAI9B,MAAMM,QAAA,GAAW,IAAK,CAAAP,IAAA;IAGjB,KAAAA,IAAA,GAAOU,IAAA,GAAO,IAAO,GAAAH,QAAA;IAC1B,KAAKN,QAAW;IAET,OAAAM,QAAA;EAAA;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}