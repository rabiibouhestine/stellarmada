{"ast":null,"code":"import { MeshGeometry } from '@pixi/mesh';\nclass RopeGeometry extends MeshGeometry {\n  constructor(width = 200, points, textureScale = 0) {\n    super(new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6));\n    this.points = points;\n    this._width = width;\n    this.textureScale = textureScale;\n    this.build();\n  }\n  get width() {\n    return this._width;\n  }\n  build() {\n    const points = this.points;\n    if (!points) return;\n    const vertexBuffer = this.getBuffer(\"aVertexPosition\");\n    const uvBuffer = this.getBuffer(\"aTextureCoord\");\n    const indexBuffer = this.getIndex();\n    if (points.length < 1) {\n      return;\n    }\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    const uvs = uvBuffer.data;\n    const indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    let amount = 0;\n    let prev = points[0];\n    const textureWidth = this._width * this.textureScale;\n    const total = points.length;\n    for (let i = 0; i < total; i++) {\n      const index = i * 4;\n      if (this.textureScale > 0) {\n        const dx = prev.x - points[i].x;\n        const dy = prev.y - points[i].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    let indexCount = 0;\n    for (let i = 0; i < total - 1; i++) {\n      const index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  }\n  updateVertices() {\n    const points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    let lastPoint = points[0];\n    let nextPoint;\n    let perpX = 0;\n    let perpY = 0;\n    const vertices = this.buffers[0].data;\n    const total = points.length;\n    const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n    for (let i = 0; i < total; i++) {\n      const point = points[i];\n      const index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      let ratio = (1 - i / (total - 1)) * 10;\n      if (ratio > 1) {\n        ratio = 1;\n      }\n      const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      if (perpLength < 1e-6) {\n        perpX = 0;\n        perpY = 0;\n      } else {\n        perpX /= perpLength;\n        perpY /= perpLength;\n        perpX *= halfWidth;\n        perpY *= halfWidth;\n      }\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  }\n  update() {\n    if (this.textureScale > 0) {\n      this.build();\n    } else {\n      this.updateVertices();\n    }\n  }\n}\nexport { RopeGeometry };","map":{"version":3,"names":["RopeGeometry","MeshGeometry","constructor","width","points","textureScale","Float32Array","length","Uint16Array","_width","build","vertexBuffer","getBuffer","uvBuffer","indexBuffer","getIndex","data","uvs","indices","amount","prev","textureWidth","total","i","index","dx","x","dy","y","distance","Math","sqrt","indexCount","update","updateVertices","lastPoint","nextPoint","perpX","perpY","vertices","buffers","halfWidth","point","ratio","perpLength"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/mesh-extras/src/geometry/RopeGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\nimport type { IPoint } from '@pixi/core';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n * @example\n * import { Point, RopeGeometry } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new RopeGeometry(100, points);\n * @memberof PIXI\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /** An array of points that determine the rope. */\n    public points: IPoint[];\n\n    /** Rope texture scale, if zero then the rope texture is stretched. */\n    public readonly textureScale: number;\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    _width: number;\n\n    /**\n     * @param width - The width (i.e., thickness) of the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param textureScale - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        this.points = points;\n        this._width = width;\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /** Refreshes Rope indices and uvs */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /** refreshes vertices of Rope mesh */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n        const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n            if (perpLength < 1e-6)\n            {\n                perpX = 0;\n                perpY = 0;\n            }\n            else\n            {\n                perpX /= perpLength;\n                perpY /= perpLength;\n\n                perpX *= halfWidth;\n                perpY *= halfWidth;\n            }\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}