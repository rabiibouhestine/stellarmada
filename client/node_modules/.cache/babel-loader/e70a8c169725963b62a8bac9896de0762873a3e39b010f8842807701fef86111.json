{"ast":null,"code":"import { MSAA_QUALITY, SCALE_MODES, MIPMAP_MODES, FORMATS, TYPES } from '@pixi/constants';\nimport { Runner } from '@pixi/runner';\nimport { BaseTexture } from '../textures/BaseTexture.mjs';\nimport { DepthResource } from '../textures/resources/DepthResource.mjs';\nclass Framebuffer {\n  constructor(width, height) {\n    this.width = Math.round(width || 100);\n    this.height = Math.round(height || 100);\n    this.stencil = false;\n    this.depth = false;\n    this.dirtyId = 0;\n    this.dirtyFormat = 0;\n    this.dirtySize = 0;\n    this.depthTexture = null;\n    this.colorTextures = [];\n    this.glFramebuffers = {};\n    this.disposeRunner = new Runner(\"disposeFramebuffer\");\n    this.multisample = MSAA_QUALITY.NONE;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  addColorTexture(index = 0, texture) {\n    this.colorTextures[index] = texture || new BaseTexture(null, {\n      scaleMode: SCALE_MODES.NEAREST,\n      resolution: 1,\n      mipmap: MIPMAP_MODES.OFF,\n      width: this.width,\n      height: this.height\n    });\n    this.dirtyId++;\n    this.dirtyFormat++;\n    return this;\n  }\n  addDepthTexture(texture) {\n    this.depthTexture = texture || new BaseTexture(new DepthResource(null, {\n      width: this.width,\n      height: this.height\n    }), {\n      scaleMode: SCALE_MODES.NEAREST,\n      resolution: 1,\n      width: this.width,\n      height: this.height,\n      mipmap: MIPMAP_MODES.OFF,\n      format: FORMATS.DEPTH_COMPONENT,\n      type: TYPES.UNSIGNED_SHORT\n    });\n    this.dirtyId++;\n    this.dirtyFormat++;\n    return this;\n  }\n  enableDepth() {\n    this.depth = true;\n    this.dirtyId++;\n    this.dirtyFormat++;\n    return this;\n  }\n  enableStencil() {\n    this.stencil = true;\n    this.dirtyId++;\n    this.dirtyFormat++;\n    return this;\n  }\n  resize(width, height) {\n    width = Math.round(width);\n    height = Math.round(height);\n    if (width === this.width && height === this.height) return;\n    this.width = width;\n    this.height = height;\n    this.dirtyId++;\n    this.dirtySize++;\n    for (let i = 0; i < this.colorTextures.length; i++) {\n      const texture = this.colorTextures[i];\n      const resolution = texture.resolution;\n      texture.setSize(width / resolution, height / resolution);\n    }\n    if (this.depthTexture) {\n      const resolution = this.depthTexture.resolution;\n      this.depthTexture.setSize(width / resolution, height / resolution);\n    }\n  }\n  dispose() {\n    this.disposeRunner.emit(this, false);\n  }\n  destroyDepthTexture() {\n    if (this.depthTexture) {\n      this.depthTexture.destroy();\n      this.depthTexture = null;\n      ++this.dirtyId;\n      ++this.dirtyFormat;\n    }\n  }\n}\nexport { Framebuffer };","map":{"version":3,"names":["Framebuffer","constructor","width","height","Math","round","stencil","depth","dirtyId","dirtyFormat","dirtySize","depthTexture","colorTextures","glFramebuffers","disposeRunner","Runner","multisample","MSAA_QUALITY","NONE","colorTexture","addColorTexture","index","texture","BaseTexture","scaleMode","SCALE_MODES","NEAREST","resolution","mipmap","MIPMAP_MODES","OFF","addDepthTexture","DepthResource","format","FORMATS","DEPTH_COMPONENT","type","TYPES","UNSIGNED_SHORT","enableDepth","enableStencil","resize","i","length","setSize","dispose","emit","destroyDepthTexture","destroy"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/core/src/framebuffer/Framebuffer.ts"],"sourcesContent":["import { FORMATS, MIPMAP_MODES, MSAA_QUALITY, SCALE_MODES, TYPES } from '@pixi/constants';\nimport { Runner } from '@pixi/runner';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { DepthResource } from '../textures/resources/DepthResource';\n\nimport type { GLFramebuffer } from './GLFramebuffer';\n\n/**\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\n *\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\n * @memberof PIXI\n */\nexport class Framebuffer\n{\n    /** Width of framebuffer in pixels. */\n    public width: number;\n\n    /** Height of framebuffer in pixels. */\n    public height: number;\n\n    /**\n     * Desired number of samples for antialiasing. 0 means AA should not be used.\n     *\n     * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\n     * Antialiasing is the same as for main buffer with renderer `antialias: true` options.\n     * Seriously affects GPU memory consumption and GPU performance.\n     * @example\n     * import { MSAA_QUALITY } from 'pixi.js';\n     *\n     * renderTexture.framebuffer.multisample = MSAA_QUALITY.HIGH;\n     * // ...\n     * renderer.render(myContainer, { renderTexture });\n     * renderer.framebuffer.blit(); // Copies data from MSAA framebuffer to texture\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    public multisample: MSAA_QUALITY;\n\n    stencil: boolean;\n    depth: boolean;\n    dirtyId: number;\n    dirtyFormat: number;\n    dirtySize: number;\n    depthTexture: BaseTexture;\n    colorTextures: Array<BaseTexture>;\n    glFramebuffers: {[key: string]: GLFramebuffer};\n    disposeRunner: Runner;\n\n    /**\n     * @param width - Width of the frame buffer\n     * @param height - Height of the frame buffer\n     */\n    constructor(width: number, height: number)\n    {\n        this.width = Math.round(width || 100);\n        this.height = Math.round(height || 100);\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFramebuffers = {};\n\n        this.disposeRunner = new Runner('disposeFramebuffer');\n        this.multisample = MSAA_QUALITY.NONE;\n    }\n\n    /**\n     * Reference to the colorTexture.\n     * @readonly\n     */\n    get colorTexture(): BaseTexture\n    {\n        return this.colorTextures[0];\n    }\n\n    /**\n     * Add texture to the colorTexture array.\n     * @param index - Index of the array to add the texture to\n     * @param texture - Texture to add to the array\n     */\n    addColorTexture(index = 0, texture?: BaseTexture): this\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index] = texture || new BaseTexture(null, {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            mipmap: MIPMAP_MODES.OFF,\n            width: this.width,\n            height: this.height,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Add a depth texture to the frame buffer.\n     * @param texture - Texture to add.\n     */\n    addDepthTexture(texture?: BaseTexture): this\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            width: this.width,\n            height: this.height,\n            mipmap: MIPMAP_MODES.OFF,\n            format: FORMATS.DEPTH_COMPONENT,\n            type: TYPES.UNSIGNED_SHORT,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable depth on the frame buffer. */\n    enableDepth(): this\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable stencil on the frame buffer. */\n    enableStencil(): this\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Resize the frame buffer\n     * @param width - Width of the frame buffer to resize to\n     * @param height - Height of the frame buffer to resize to\n     */\n    resize(width: number, height: number): void\n    {\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            const texture = this.colorTextures[i];\n            const resolution = texture.resolution;\n\n            // take into account the fact the texture may have a different resolution..\n            texture.setSize(width / resolution, height / resolution);\n        }\n\n        if (this.depthTexture)\n        {\n            const resolution = this.depthTexture.resolution;\n\n            this.depthTexture.setSize(width / resolution, height / resolution);\n        }\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys and removes the depth texture added to this framebuffer. */\n    destroyDepthTexture(): void\n    {\n        if (this.depthTexture)\n        {\n            this.depthTexture.destroy();\n            this.depthTexture = null;\n\n            ++this.dirtyId;\n            ++this.dirtyFormat;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}