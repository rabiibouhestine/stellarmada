{"ast":null,"code":"function createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  outBuffer = outBuffer || new Uint16Array(totalIndices);\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\nexport { createIndicesForQuads };","map":{"version":3,"names":["createIndicesForQuads","size","outBuffer","totalIndices","Uint16Array","length","Error","i","j"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/utils/src/data/createIndicesForQuads.ts"],"sourcesContent":["/**\n * Generic Mask Stack data structure\n * @memberof PIXI.utils\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    outBuffer = outBuffer || new Uint16Array(totalIndices);\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"mappings":"AASI,SAAAA,sBAAAC,IAAA,EACAC,SAAA,GAA8C,IAElD;EAEI,MAAMC,YAAA,GAAeF,IAAO;EAEhBC,SAAA,GAAAA,SAAA,IAAa,IAAIE,WAAA,CAAYD,YAAY;EAEjD,IAAAD,SAAA,CAAUG,MAAA,KAAWF,YACzB;IACI,MAAM,IAAIG,KAAA,CAA6C,uCAAAJ,SAAA,CAAUG,MAAA,iBAAuBF,YAAc;EAAA;EAIjG,SAAAI,CAAA,GAAI,GAAGC,CAAI,MAAGD,CAAA,GAAIJ,YAAc,EAAAI,CAAA,IAAK,CAAG,EAAAC,CAAA,IAAK,CACtD;IACcN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;IACbN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;IACbN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;IACbN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;IACbN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;IACbN,SAAA,CAAAK,CAAA,GAAI,KAAKC,CAAI;EAAA;EAGpB,OAAAN,SAAA;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}