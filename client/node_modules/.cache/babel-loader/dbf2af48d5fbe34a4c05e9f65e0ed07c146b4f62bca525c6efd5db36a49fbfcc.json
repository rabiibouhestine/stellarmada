{"ast":null,"code":"import { settings, utils } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\nconst _HTMLTextStyle = class extends TextStyle {\n  constructor() {\n    super(...arguments);\n    this._fonts = [];\n    this._overrides = [];\n    this._stylesheet = \"\";\n    this.fontsDirty = false;\n  }\n  static from(originalStyle) {\n    return new _HTMLTextStyle(Object.keys(_HTMLTextStyle.defaultOptions).reduce((obj, prop) => ({\n      ...obj,\n      [prop]: originalStyle[prop]\n    }), {}));\n  }\n  cleanFonts() {\n    if (this._fonts.length > 0) {\n      this._fonts.forEach(font => {\n        URL.revokeObjectURL(font.src);\n        font.refs--;\n        if (font.refs === 0) {\n          if (font.fontFace) {\n            document.fonts.delete(font.fontFace);\n          }\n          delete _HTMLTextStyle.availableFonts[font.originalUrl];\n        }\n      });\n      this.fontFamily = \"Arial\";\n      this._fonts.length = 0;\n      this.styleID++;\n      this.fontsDirty = true;\n    }\n  }\n  loadFont(url, options = {}) {\n    const {\n      availableFonts\n    } = _HTMLTextStyle;\n    if (availableFonts[url]) {\n      const font = availableFonts[url];\n      this._fonts.push(font);\n      font.refs++;\n      this.styleID++;\n      this.fontsDirty = true;\n      return Promise.resolve();\n    }\n    return settings.ADAPTER.fetch(url).then(response => response.blob()).then(async blob => new Promise((resolve, reject) => {\n      const src = URL.createObjectURL(blob);\n      const reader = new FileReader();\n      reader.onload = () => resolve([src, reader.result]);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    })).then(async ([src, dataSrc]) => {\n      const font = Object.assign({\n        family: utils.path.basename(url, utils.path.extname(url)),\n        weight: \"normal\",\n        style: \"normal\",\n        src,\n        dataSrc,\n        refs: 1,\n        originalUrl: url,\n        fontFace: null\n      }, options);\n      availableFonts[url] = font;\n      this._fonts.push(font);\n      this.styleID++;\n      const fontFace = new FontFace(font.family, `url(${font.src})`, {\n        weight: font.weight,\n        style: font.style\n      });\n      font.fontFace = fontFace;\n      await fontFace.load();\n      document.fonts.add(fontFace);\n      await document.fonts.ready;\n      this.styleID++;\n      this.fontsDirty = true;\n    });\n  }\n  addOverride(...value) {\n    const toAdd = value.filter(v => !this._overrides.includes(v));\n    if (toAdd.length > 0) {\n      this._overrides.push(...toAdd);\n      this.styleID++;\n    }\n  }\n  removeOverride(...value) {\n    const toRemove = value.filter(v => this._overrides.includes(v));\n    if (toRemove.length > 0) {\n      this._overrides = this._overrides.filter(v => !toRemove.includes(v));\n      this.styleID++;\n    }\n  }\n  toCSS(scale) {\n    return [`transform: scale(${scale})`, `transform-origin: top left`, \"display: inline-block\", `color: ${this.normalizeColor(this.fill)}`, `font-size: ${this.fontSize}px`, `font-family: ${this.fontFamily}`, `font-weight: ${this.fontWeight}`, `font-style: ${this.fontStyle}`, `font-variant: ${this.fontVariant}`, `letter-spacing: ${this.letterSpacing}px`, `text-align: ${this.align}`, `padding: ${this.padding}px`, `white-space: ${this.whiteSpace}`, ...(this.lineHeight ? [`line-height: ${this.lineHeight}px`] : []), ...(this.wordWrap ? [`word-wrap: ${this.breakWords ? \"break-all\" : \"break-word\"}`, `max-width: ${this.wordWrapWidth}px`] : []), ...(this.strokeThickness ? [`-webkit-text-stroke-width: ${this.strokeThickness}px`, `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`, `text-stroke-width: ${this.strokeThickness}px`, `text-stroke-color: ${this.normalizeColor(this.stroke)}`, \"paint-order: stroke\"] : []), ...(this.dropShadow ? [this.dropShadowToCSS()] : []), ...this._overrides].join(\";\");\n  }\n  toGlobalCSS() {\n    return this._fonts.reduce((result, font) => `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style}; \n            }`, this._stylesheet);\n  }\n  get stylesheet() {\n    return this._stylesheet;\n  }\n  set stylesheet(value) {\n    if (this._stylesheet !== value) {\n      this._stylesheet = value;\n      this.styleID++;\n    }\n  }\n  normalizeColor(color) {\n    if (Array.isArray(color)) {\n      color = utils.rgb2hex(color);\n    }\n    if (typeof color === \"number\") {\n      return utils.hex2string(color);\n    }\n    return color;\n  }\n  dropShadowToCSS() {\n    let color = this.normalizeColor(this.dropShadowColor);\n    const alpha = this.dropShadowAlpha;\n    const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n    const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n    if (color.startsWith(\"#\") && alpha < 1) {\n      color += (alpha * 255 | 0).toString(16).padStart(2, \"0\");\n    }\n    const position = `${x}px ${y}px`;\n    if (this.dropShadowBlur > 0) {\n      return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n    }\n    return `text-shadow: ${position} ${color}`;\n  }\n  reset() {\n    Object.assign(this, _HTMLTextStyle.defaultOptions);\n  }\n  onBeforeDraw() {\n    const {\n      fontsDirty: prevFontsDirty\n    } = this;\n    this.fontsDirty = false;\n    if (this.isSafari && this._fonts.length > 0 && prevFontsDirty) {\n      return new Promise(resolve => setTimeout(resolve, 100));\n    }\n    return Promise.resolve();\n  }\n  get isSafari() {\n    const {\n      userAgent\n    } = settings.ADAPTER.getNavigator();\n    return /^((?!chrome|android).)*safari/i.test(userAgent);\n  }\n  set fillGradientStops(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientStops is not supported by HTMLText\");\n  }\n  get fillGradientStops() {\n    return super.fillGradientStops;\n  }\n  set fillGradientType(_value) {\n    console.warn(\"[HTMLTextStyle] fillGradientType is not supported by HTMLText\");\n  }\n  get fillGradientType() {\n    return super.fillGradientType;\n  }\n  set miterLimit(_value) {\n    console.warn(\"[HTMLTextStyle] miterLimit is not supported by HTMLText\");\n  }\n  get miterLimit() {\n    return super.miterLimit;\n  }\n  set trim(_value) {\n    console.warn(\"[HTMLTextStyle] trim is not supported by HTMLText\");\n  }\n  get trim() {\n    return super.trim;\n  }\n  set textBaseline(_value) {\n    console.warn(\"[HTMLTextStyle] textBaseline is not supported by HTMLText\");\n  }\n  get textBaseline() {\n    return super.textBaseline;\n  }\n  set leading(_value) {\n    console.warn(\"[HTMLTextStyle] leading is not supported by HTMLText\");\n  }\n  get leading() {\n    return super.leading;\n  }\n  set lineJoin(_value) {\n    console.warn(\"[HTMLTextStyle] lineJoin is not supported by HTMLText\");\n  }\n  get lineJoin() {\n    return super.lineJoin;\n  }\n};\nlet HTMLTextStyle = _HTMLTextStyle;\nHTMLTextStyle.availableFonts = {};\nHTMLTextStyle.defaultOptions = {\n  align: \"left\",\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: \"black\",\n  dropShadowDistance: 5,\n  fill: \"black\",\n  fontFamily: \"Arial\",\n  fontSize: 26,\n  fontStyle: \"normal\",\n  fontVariant: \"normal\",\n  fontWeight: \"normal\",\n  letterSpacing: 0,\n  lineHeight: 0,\n  padding: 0,\n  stroke: \"black\",\n  strokeThickness: 0,\n  whiteSpace: \"normal\",\n  wordWrap: false,\n  wordWrapWidth: 100\n};\nexport { HTMLTextStyle };","map":{"version":3,"names":["_HTMLTextStyle","TextStyle","constructor","arguments","_fonts","_overrides","_stylesheet","fontsDirty","from","originalStyle","Object","keys","defaultOptions","reduce","obj","prop","cleanFonts","length","forEach","font","URL","revokeObjectURL","src","refs","fontFace","document","fonts","delete","availableFonts","originalUrl","fontFamily","styleID","loadFont","url","options","push","Promise","resolve","settings","ADAPTER","fetch","then","response","blob","reject","createObjectURL","reader","FileReader","onload","result","onerror","readAsDataURL","dataSrc","assign","family","utils","path","basename","extname","weight","style","FontFace","load","add","ready","addOverride","value","toAdd","filter","v","includes","removeOverride","toRemove","toCSS","scale","normalizeColor","fill","fontSize","fontWeight","fontStyle","fontVariant","letterSpacing","align","padding","whiteSpace","lineHeight","wordWrap","breakWords","wordWrapWidth","strokeThickness","stroke","dropShadow","dropShadowToCSS","join","toGlobalCSS","stylesheet","color","Array","isArray","rgb2hex","hex2string","dropShadowColor","alpha","dropShadowAlpha","x","Math","round","cos","dropShadowAngle","dropShadowDistance","y","sin","startsWith","toString","padStart","position","dropShadowBlur","reset","onBeforeDraw","prevFontsDirty","isSafari","setTimeout","userAgent","getNavigator","test","fillGradientStops","_value","console","warn","fillGradientType","miterLimit","trim","textBaseline","leading","lineJoin","HTMLTextStyle","PI"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/text-html/src/HTMLTextStyle.ts"],"sourcesContent":["import { settings, utils } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\n\nimport type {\n    ITextStyle,\n    TextStyleFontStyle,\n    TextStyleFontWeight,\n    TextStyleLineJoin,\n    TextStyleTextBaseline\n} from '@pixi/text';\n\n/**\n * HTMLText support more white-space options.\n * @memberof PIXI\n * @since 7.2.0\n * @see PIXI.IHTMLTextStyle\n */\nexport type HTMLTextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line' | 'nowrap' | 'pre-wrap';\n\n// Subset of ITextStyle\ntype ITextStyleIgnore = 'whiteSpace'\n| 'fillGradientStops'\n| 'fillGradientType'\n| 'miterLimit'\n| 'textBaseline'\n| 'trim'\n| 'leading'\n| 'lineJoin';\n\n/**\n * Modifed versions from ITextStyle.\n * @memberof PIXI\n * @extends PIXI.ITextStyle\n * @since 7.2.0\n */\nexport interface IHTMLTextStyle extends Omit<ITextStyle, ITextStyleIgnore>\n{\n    /** White-space with expanded options. */\n    whiteSpace: HTMLTextStyleWhiteSpace;\n}\n\n/**\n * Font information for HTMLText\n * @memberof PIXI\n * @since 7.2.0\n */\nexport interface IHTMLFont\n{\n    /** User-supplied URL request */\n    originalUrl: string;\n    /** Base64 string for font */\n    dataSrc: string;\n    /** FontFace installed in the document */\n    fontFace: FontFace | null;\n    /** Blob-based URL for font */\n    src: string;\n    /** Family name of font */\n    family: string;\n    /** Weight of the font */\n    weight: TextStyleFontWeight;\n    /** Style of the font */\n    style: TextStyleFontStyle;\n    /** Reference counter */\n    refs: number;\n}\n\n/**\n * Used internally to restrict text style usage and convert easily to CSS.\n * @class\n * @memberof PIXI\n * @param {PIXI.ITextStyle|PIXI.IHTMLTextStyle} [style] - Style to copy.\n * @since 7.2.0\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    /** The collection of installed fonts */\n    public static availableFonts: Record<string, IHTMLFont> = {};\n\n    /**\n     * List of default options, these are largely the same as TextStyle,\n     * with the exception of whiteSpace, which is set to 'normal' by default.\n     */\n    public static readonly defaultOptions: IHTMLTextStyle = {\n        /** Align */\n        align: 'left',\n        /** Break words */\n        breakWords: false,\n        /** Drop shadow */\n        dropShadow: false,\n        /** Drop shadow alpha */\n        dropShadowAlpha: 1,\n        /**\n         * Drop shadow angle\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** Drop shadow blur */\n        dropShadowBlur: 0,\n        /** Drop shadow color */\n        dropShadowColor: 'black',\n        /** Drop shadow distance */\n        dropShadowDistance: 5,\n        /** Fill */\n        fill: 'black',\n        /** Font family */\n        fontFamily: 'Arial',\n        /** Font size */\n        fontSize: 26,\n        /** Font style */\n        fontStyle: 'normal',\n        /** Font variant */\n        fontVariant: 'normal',\n        /** Font weight */\n        fontWeight: 'normal',\n        /** Letter spacing */\n        letterSpacing: 0,\n        /** Line height */\n        lineHeight: 0,\n        /** Padding */\n        padding: 0,\n        /** Stroke */\n        stroke: 'black',\n        /** Stroke thickness */\n        strokeThickness: 0,\n        /** White space */\n        whiteSpace: 'normal',\n        /** Word wrap */\n        wordWrap: false,\n        /** Word wrap width */\n        wordWrapWidth: 100,\n    };\n\n    /** For using custom fonts */\n    private _fonts: IHTMLFont[] = [];\n\n    /** List of internal style rules */\n    private _overrides: string[] = [];\n\n    /** Global rules or stylesheet, useful for creating rules for rendering */\n    private _stylesheet = '';\n\n    /** Track font changes internally */\n    private fontsDirty = false;\n\n    /**\n     * Convert a TextStyle to HTMLTextStyle\n     * @param originalStyle\n     * @example\n     * import {TextStyle } from 'pixi.js';\n     * import {HTMLTextStyle} from '@pixi/text-html';\n     * const style = new TextStyle();\n     * const htmlStyle = HTMLTextStyle.from(style);\n     */\n    static from(originalStyle: TextStyle | Partial<IHTMLTextStyle>): HTMLTextStyle\n    {\n        return new HTMLTextStyle(Object.keys(HTMLTextStyle.defaultOptions)\n            .reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop as keyof IHTMLTextStyle] }), {})\n        );\n    }\n\n    /** Clear the current font */\n    public cleanFonts(): void\n    {\n        if (this._fonts.length > 0)\n        {\n            this._fonts.forEach((font) =>\n            {\n                URL.revokeObjectURL(font.src);\n                font.refs--;\n                if (font.refs === 0)\n                {\n                    if (font.fontFace)\n                    {\n                        document.fonts.delete(font.fontFace);\n                    }\n                    delete HTMLTextStyle.availableFonts[font.originalUrl];\n                }\n            });\n            this.fontFamily = 'Arial';\n            this._fonts.length = 0;\n            this.styleID++;\n            this.fontsDirty = true;\n        }\n    }\n\n    /**\n     * Because of how HTMLText renders, fonts need to be imported\n     * @param url\n     * @param options\n     */\n    public loadFont(url: string, options: Partial<Pick<IHTMLFont, 'weight' | 'style' | 'family'>> = {}): Promise<void>\n    {\n        const { availableFonts } = HTMLTextStyle;\n\n        // Font is already installed\n        if (availableFonts[url])\n        {\n            const font = availableFonts[url];\n\n            this._fonts.push(font);\n            font.refs++;\n            this.styleID++;\n            this.fontsDirty = true;\n\n            return Promise.resolve();\n        }\n\n        return settings.ADAPTER.fetch(url)\n            .then((response) => response.blob())\n            .then(async (blob) => new Promise<[string, string]>((resolve, reject) =>\n            {\n                const src = URL.createObjectURL(blob);\n                const reader = new FileReader();\n\n                reader.onload = () => resolve([src, reader.result as string]);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }))\n            .then(async ([src, dataSrc]) =>\n            {\n                const font: IHTMLFont = Object.assign({\n                    family: utils.path.basename(url, utils.path.extname(url)),\n                    weight: 'normal',\n                    style: 'normal',\n                    src,\n                    dataSrc,\n                    refs: 1,\n                    originalUrl: url,\n                    fontFace: null,\n                }, options);\n\n                availableFonts[url] = font;\n                this._fonts.push(font);\n                this.styleID++;\n\n                // Load it into the current DOM so we can properly measure it!\n                const fontFace = new FontFace(font.family, `url(${font.src})`, {\n                    weight: font.weight,\n                    style: font.style,\n                });\n\n                // Keep this reference so we can remove it later from document\n                font.fontFace = fontFace;\n\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                await document.fonts.ready;\n\n                this.styleID++;\n                this.fontsDirty = true;\n            });\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this._overrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this._overrides.push(...toAdd);\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this._overrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this._overrides = this._overrides.filter((v) => !toRemove.includes(v));\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Internally converts all of the style properties into CSS equivalents.\n     * @param scale\n     * @returns The CSS style string, for setting `style` property of root HTMLElement.\n     */\n    public toCSS(scale: number): string\n    {\n        return [\n            `transform: scale(${scale})`,\n            `transform-origin: top left`,\n            'display: inline-block',\n            `color: ${this.normalizeColor(this.fill)}`,\n            `font-size: ${(this.fontSize as number)}px`,\n            `font-family: ${this.fontFamily}`,\n            `font-weight: ${this.fontWeight}`,\n            `font-style: ${this.fontStyle}`,\n            `font-variant: ${this.fontVariant}`,\n            `letter-spacing: ${this.letterSpacing}px`,\n            `text-align: ${this.align}`,\n            `padding: ${this.padding}px`,\n            `white-space: ${this.whiteSpace}`,\n            ...this.lineHeight ? [`line-height: ${this.lineHeight}px`] : [],\n            ...this.wordWrap ? [\n                `word-wrap: ${this.breakWords ? 'break-all' : 'break-word'}`,\n                `max-width: ${this.wordWrapWidth}px`\n            ] : [],\n            ...this.strokeThickness ? [\n                `-webkit-text-stroke-width: ${this.strokeThickness}px`,\n                `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                `text-stroke-width: ${this.strokeThickness}px`,\n                `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                'paint-order: stroke',\n            ] : [],\n            ...this.dropShadow ? [this.dropShadowToCSS()] : [],\n            ...this._overrides,\n        ].join(';');\n    }\n\n    /** Get the font CSS styles from the loaded font, If available. */\n    public toGlobalCSS(): string\n    {\n        return this._fonts.reduce((result, font) => (\n            `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style}; \n            }`\n        ), this._stylesheet);\n    }\n\n    /** Internal stylesheet contents, useful for creating rules for rendering */\n    public get stylesheet(): string\n    {\n        return this._stylesheet;\n    }\n    public set stylesheet(value: string)\n    {\n        if (this._stylesheet !== value)\n        {\n            this._stylesheet = value;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Convert numerical colors into hex-strings\n     * @param color\n     */\n    private normalizeColor(color: any): string\n    {\n        if (Array.isArray(color))\n        {\n            color = utils.rgb2hex(color);\n        }\n\n        if (typeof color === 'number')\n        {\n            return utils.hex2string(color);\n        }\n\n        return color;\n    }\n\n    /** Convert the internal drop-shadow settings to CSS text-shadow */\n    private dropShadowToCSS(): string\n    {\n        let color = this.normalizeColor(this.dropShadowColor);\n        const alpha = this.dropShadowAlpha;\n        const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n        const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n\n        // Append alpha to color\n        if (color.startsWith('#') && alpha < 1)\n        {\n            color += (alpha * 255 | 0).toString(16).padStart(2, '0');\n        }\n\n        const position = `${x}px ${y}px`;\n\n        if (this.dropShadowBlur > 0)\n        {\n            return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n        }\n\n        return `text-shadow: ${position} ${color}`;\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        Object.assign(this, HTMLTextStyle.defaultOptions);\n    }\n\n    /**\n     * Called after the image is loaded but before drawing to the canvas.\n     * Mostly used to handle Safari's font loading bug.\n     * @ignore\n     */\n    public onBeforeDraw()\n    {\n        const { fontsDirty: prevFontsDirty } = this;\n\n        this.fontsDirty = false;\n\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (this.isSafari && this._fonts.length > 0 && prevFontsDirty)\n        {\n            return new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Proving that Safari is the new IE\n     * @ignore\n     */\n    private get isSafari(): boolean\n    {\n        const { userAgent } = settings.ADAPTER.getNavigator();\n\n        return (/^((?!chrome|android).)*safari/i).test(userAgent);\n    }\n\n    override set fillGradientStops(_value: number[])\n    {\n        console.warn('[HTMLTextStyle] fillGradientStops is not supported by HTMLText');\n    }\n    override get fillGradientStops()\n    {\n        return super.fillGradientStops;\n    }\n\n    override set fillGradientType(_value: number)\n    {\n        console.warn('[HTMLTextStyle] fillGradientType is not supported by HTMLText');\n    }\n    override get fillGradientType()\n    {\n        return super.fillGradientType;\n    }\n\n    override set miterLimit(_value: number)\n    {\n        console.warn('[HTMLTextStyle] miterLimit is not supported by HTMLText');\n    }\n    override get miterLimit()\n    {\n        return super.miterLimit;\n    }\n\n    override set trim(_value: boolean)\n    {\n        console.warn('[HTMLTextStyle] trim is not supported by HTMLText');\n    }\n    override get trim()\n    {\n        return super.trim;\n    }\n\n    override set textBaseline(_value: TextStyleTextBaseline)\n    {\n        console.warn('[HTMLTextStyle] textBaseline is not supported by HTMLText');\n    }\n    override get textBaseline()\n    {\n        return super.textBaseline;\n    }\n\n    override set leading(_value: number)\n    {\n        console.warn('[HTMLTextStyle] leading is not supported by HTMLText');\n    }\n    override get leading()\n    {\n        return super.leading;\n    }\n\n    override set lineJoin(_value: TextStyleLineJoin)\n    {\n        console.warn('[HTMLTextStyle] lineJoin is not supported by HTMLText');\n    }\n    override get lineJoin()\n    {\n        return super.lineJoin;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}