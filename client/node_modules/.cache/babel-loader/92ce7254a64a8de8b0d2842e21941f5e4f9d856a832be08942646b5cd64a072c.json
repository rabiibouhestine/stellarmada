{"ast":null,"code":"import * as PIXI from \"pixi.js\";\nimport { Deck } from \"./Deck\";\nimport { Card } from \"./Card\";\nexport class Player {\n  constructor(app, sheet, state, positions, isPlayer) {\n    this.app = app;\n    this.sheet = sheet;\n    this.state = state;\n    this.isPlayer = isPlayer;\n    this.positions = positions;\n    this.cardsContainer = new PIXI.Container();\n    this.cardsContainer.sortableChildren = true;\n    this.app.stage.addChild(this.cardsContainer);\n    this.handCount = state.handCount;\n    this.tavern = new Deck(app, sheet, \"tile028.jpg\", this.positions.tavern, state.tavern);\n    this.grave = new Deck(app, sheet, \"tile028.jpg\", this.positions.grave, state.grave);\n    this.castle = new Deck(app, sheet, \"tile013.jpg\", this.positions.castle, state.castle);\n    this.jester = new Deck(app, sheet, \"tile014.jpg\", this.positions.jester, state.jester);\n    this.hand = this.createCards(state.hand, this.isPlayer, this.positions.hand);\n    this.field = this.createCards(state.field, true, this.positions.field);\n    this.shield = this.createCards(state.shield, true, this.positions.shield);\n  }\n  createCards(locationState, isPlayer, start) {\n    const cards = [];\n    for (let index = 0; index < (isPlayer ? locationState.length : this.state.handCount); index++) {\n      const cardName = isPlayer ? locationState[index] : \"tile028.jpg\";\n      const card = new Card(this.cardsContainer, this.sheet, cardName, start);\n      cards.push(card);\n    }\n    this.repositionCards(cards, start);\n    return cards;\n  }\n  repositionCards(array, start) {\n    for (let index = 0; index < array.length; index++) {\n      const newPosition = {\n        x: start.x + index * 100,\n        y: start.y\n      };\n      array[index].moveTo(newPosition, true, false);\n    }\n  }\n  revive(x) {\n    this.grave.setSize(this.grave.size - x);\n    this.tavern.setSize(this.tavern.size + x);\n  }\n  buildShield(units) {\n    const cards = this.field.filter(card => units.includes(card.name));\n    this.shield.push(...cards);\n    this.field = this.field.filter(card => !units.includes(card.name));\n    this.repositionCards(this.field, this.positions.field);\n    this.repositionCards(this.shield, this.positions.shield);\n  }\n  drawTavern(x, units) {\n    this.tavern.setSize(this.tavern.size - x);\n    this.handCount += x;\n    if (this.isPlayer) {\n      for (const index in units) {\n        const card = new Card(this.cardsContainer, this.sheet, units[index], this.positions.tavern);\n        this.hand.push(card);\n      }\n    } else {\n      for (let step = 0; step < x; step++) {\n        const card = new Card(this.cardsContainer, this.sheet, \"tile028.jpg\", this.positions.tavern);\n        this.hand.push(card);\n      }\n    }\n    this.repositionCards(this.hand, this.positions.hand);\n  }\n  drawCastle(unit) {\n    this.castle.setSize(this.castle.size - 1);\n    this.handCount += 1;\n    const name = this.isPlayer ? this.castle.getName() : \"tile028.jpg\";\n    const card = new Card(this.cardsContainer, this.sheet, name, this.positions.castle);\n    this.castle.setName(unit);\n    this.hand.push(card);\n    this.repositionCards(this.hand, this.positions.hand);\n  }\n  attack(units) {\n    const x = units.length;\n    this.handCount -= x;\n    if (this.isPlayer) {\n      const cards = this.hand.filter(card => units.includes(card.name));\n      this.hand = this.hand.filter(card => !units.includes(card.name));\n      this.field.push(...cards);\n    } else {\n      const cards = this.hand.slice(-x);\n      this.hand.splice(-x);\n      for (const card in cards) {\n        cards[card].reveal(units[card]);\n        this.field.push(cards[card]);\n      }\n    }\n    this.repositionCards(this.field, this.positions.field);\n    this.repositionCards(this.hand, this.positions.hand);\n  }\n  clearField() {\n    this.field.forEach(card => card.moveTo(this.positions.grave, false, true));\n    this.field = [];\n  }\n  discardShield(units) {\n    const cards = this.shield.filter(card => units.includes(card.name));\n    cards.forEach(card => card.moveTo(this.positions.grave, false, true));\n    this.shield = this.shield.filter(card => !units.includes(card.name));\n    this.repositionCards(this.shield, this.positions.shield);\n  }\n  discardHand(x, units) {\n    this.handCount -= x;\n    this.grave.setSize(this.grave.size + x);\n    const moveCardsToGrave = cards => {\n      cards.forEach(card => card.moveTo(this.positions.grave, false, true));\n    };\n    if (this.isPlayer) {\n      const cards = this.hand.filter(card => units.includes(card.name));\n      this.hand = this.hand.filter(card => !units.includes(card.name));\n      moveCardsToGrave(cards);\n    } else {\n      const cards = this.hand.slice(-x);\n      this.hand.splice(-x);\n      moveCardsToGrave(cards);\n    }\n    this.repositionCards(this.hand, this.positions.hand);\n  }\n}","map":{"version":3,"names":["PIXI","Deck","Card","Player","constructor","app","sheet","state","positions","isPlayer","cardsContainer","Container","sortableChildren","stage","addChild","handCount","tavern","grave","castle","jester","hand","createCards","field","shield","locationState","start","cards","index","length","cardName","card","push","repositionCards","array","newPosition","x","y","moveTo","revive","setSize","size","buildShield","units","filter","includes","name","drawTavern","step","drawCastle","unit","getName","setName","attack","slice","splice","reveal","clearField","forEach","discardShield","discardHand","moveCardsToGrave"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/src/game/entities/Player.js"],"sourcesContent":["import * as PIXI from \"pixi.js\";\n\nimport { Deck } from \"./Deck\";\nimport { Card } from \"./Card\";\n\nexport class Player {\n    constructor(app, sheet, state, positions, isPlayer) {\n        this.app = app;\n        this.sheet = sheet;\n        this.state = state;\n        this.isPlayer = isPlayer;\n        this.positions = positions;\n\n        this.cardsContainer = new PIXI.Container();\n        this.cardsContainer.sortableChildren = true;\n        this.app.stage.addChild(this.cardsContainer);\n\n        this.handCount = state.handCount;\n        this.tavern = new Deck(app, sheet, \"tile028.jpg\", this.positions.tavern, state.tavern);\n        this.grave = new Deck(app, sheet, \"tile028.jpg\", this.positions.grave, state.grave);\n        this.castle = new Deck(app, sheet, \"tile013.jpg\", this.positions.castle, state.castle);\n        this.jester = new Deck(app, sheet, \"tile014.jpg\", this.positions.jester, state.jester);\n        this.hand = this.createCards(state.hand, this.isPlayer, this.positions.hand);\n        this.field = this.createCards(state.field, true, this.positions.field);\n        this.shield = this.createCards(state.shield, true, this.positions.shield);\n    }\n\n    createCards(locationState, isPlayer, start) {\n        const cards = [];\n        for (let index = 0; index < (isPlayer ? locationState.length : this.state.handCount); index++) {\n            const cardName = isPlayer ? locationState[index] : \"tile028.jpg\";\n            const card = new Card(this.cardsContainer, this.sheet, cardName, start);\n            cards.push(card);\n        }\n        this.repositionCards(cards, start);\n        return cards;\n    }\n\n    repositionCards(array, start) {\n        for (let index = 0; index < array.length; index++) {\n            const newPosition = {\n                x: start.x + (index * 100),\n                y: start.y\n            };\n            array[index].moveTo(newPosition, true, false);\n        }\n    }\n\n    revive(x) {\n        this.grave.setSize(this.grave.size - x);\n        this.tavern.setSize(this.tavern.size + x);\n    }\n\n    buildShield(units) {\n        const cards = this.field.filter(card => units.includes(card.name));\n        this.shield.push(...cards);\n        this.field = this.field.filter(card => !units.includes(card.name));\n        this.repositionCards(this.field, this.positions.field);\n        this.repositionCards(this.shield, this.positions.shield);\n    }\n\n    drawTavern(x, units) {\n        this.tavern.setSize(this.tavern.size - x);\n        this.handCount += x;\n        if (this.isPlayer) {\n            for (const index in units) {\n                const card = new Card(this.cardsContainer, this.sheet, units[index], this.positions.tavern);\n                this.hand.push(card);\n            }\n        } else {\n            for (let step = 0; step < x; step++) {\n                const card = new Card(this.cardsContainer, this.sheet, \"tile028.jpg\", this.positions.tavern);\n                this.hand.push(card);\n            }\n        }\n        this.repositionCards(this.hand, this.positions.hand);\n    }\n\n    drawCastle(unit) {\n        this.castle.setSize(this.castle.size - 1);\n        this.handCount += 1;\n        const name = this.isPlayer? this.castle.getName() : \"tile028.jpg\";\n        const card = new Card(this.cardsContainer, this.sheet, name, this.positions.castle);\n        this.castle.setName(unit);\n        this.hand.push(card);\n        this.repositionCards(this.hand, this.positions.hand);\n    }\n\n    attack(units) {\n        const x = units.length;\n        this.handCount -= x;\n        if (this.isPlayer) {\n            const cards = this.hand.filter(card => units.includes(card.name));\n            this.hand = this.hand.filter(card => !units.includes(card.name));\n            this.field.push(...cards);\n        } else {\n            const cards = this.hand.slice(-x);\n            this.hand.splice(-x);\n            for (const card in cards) {\n                cards[card].reveal(units[card]);\n                this.field.push(cards[card]);\n            }\n        }\n        this.repositionCards(this.field, this.positions.field);\n        this.repositionCards(this.hand, this.positions.hand);\n    }\n\n    clearField() {\n        this.field.forEach(card => card.moveTo(this.positions.grave, false, true));\n        this.field = [];\n    }\n\n    discardShield(units) {\n        const cards = this.shield.filter(card => units.includes(card.name));\n        cards.forEach(card => card.moveTo(this.positions.grave, false, true));\n        this.shield = this.shield.filter(card => !units.includes(card.name));\n        this.repositionCards(this.shield, this.positions.shield);\n    }\n\n    discardHand(x, units) {\n        this.handCount -= x;\n        this.grave.setSize(this.grave.size + x);\n\n        const moveCardsToGrave = (cards) => {\n            cards.forEach(card => card.moveTo(this.positions.grave, false, true));\n        };\n\n        if (this.isPlayer) {\n            const cards = this.hand.filter(card => units.includes(card.name));\n            this.hand = this.hand.filter(card => !units.includes(card.name));\n            moveCardsToGrave(cards);\n        } else {\n            const cards = this.hand.slice(-x);\n            this.hand.splice(-x);\n            moveCardsToGrave(cards);\n        }\n\n        this.repositionCards(this.hand, this.positions.hand);\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,SAAS;AAE/B,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,IAAI,QAAQ,QAAQ;AAE7B,OAAO,MAAMC,MAAM,CAAC;EAChBC,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAE;IAChD,IAAI,CAACJ,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACD,SAAS,GAAGA,SAAS;IAE1B,IAAI,CAACE,cAAc,GAAG,IAAIV,IAAI,CAACW,SAAS,CAAC,CAAC;IAC1C,IAAI,CAACD,cAAc,CAACE,gBAAgB,GAAG,IAAI;IAC3C,IAAI,CAACP,GAAG,CAACQ,KAAK,CAACC,QAAQ,CAAC,IAAI,CAACJ,cAAc,CAAC;IAE5C,IAAI,CAACK,SAAS,GAAGR,KAAK,CAACQ,SAAS;IAChC,IAAI,CAACC,MAAM,GAAG,IAAIf,IAAI,CAACI,GAAG,EAAEC,KAAK,EAAE,aAAa,EAAE,IAAI,CAACE,SAAS,CAACQ,MAAM,EAAET,KAAK,CAACS,MAAM,CAAC;IACtF,IAAI,CAACC,KAAK,GAAG,IAAIhB,IAAI,CAACI,GAAG,EAAEC,KAAK,EAAE,aAAa,EAAE,IAAI,CAACE,SAAS,CAACS,KAAK,EAAEV,KAAK,CAACU,KAAK,CAAC;IACnF,IAAI,CAACC,MAAM,GAAG,IAAIjB,IAAI,CAACI,GAAG,EAAEC,KAAK,EAAE,aAAa,EAAE,IAAI,CAACE,SAAS,CAACU,MAAM,EAAEX,KAAK,CAACW,MAAM,CAAC;IACtF,IAAI,CAACC,MAAM,GAAG,IAAIlB,IAAI,CAACI,GAAG,EAAEC,KAAK,EAAE,aAAa,EAAE,IAAI,CAACE,SAAS,CAACW,MAAM,EAAEZ,KAAK,CAACY,MAAM,CAAC;IACtF,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,WAAW,CAACd,KAAK,CAACa,IAAI,EAAE,IAAI,CAACX,QAAQ,EAAE,IAAI,CAACD,SAAS,CAACY,IAAI,CAAC;IAC5E,IAAI,CAACE,KAAK,GAAG,IAAI,CAACD,WAAW,CAACd,KAAK,CAACe,KAAK,EAAE,IAAI,EAAE,IAAI,CAACd,SAAS,CAACc,KAAK,CAAC;IACtE,IAAI,CAACC,MAAM,GAAG,IAAI,CAACF,WAAW,CAACd,KAAK,CAACgB,MAAM,EAAE,IAAI,EAAE,IAAI,CAACf,SAAS,CAACe,MAAM,CAAC;EAC7E;EAEAF,WAAWA,CAACG,aAAa,EAAEf,QAAQ,EAAEgB,KAAK,EAAE;IACxC,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,IAAIlB,QAAQ,GAAGe,aAAa,CAACI,MAAM,GAAG,IAAI,CAACrB,KAAK,CAACQ,SAAS,CAAC,EAAEY,KAAK,EAAE,EAAE;MAC3F,MAAME,QAAQ,GAAGpB,QAAQ,GAAGe,aAAa,CAACG,KAAK,CAAC,GAAG,aAAa;MAChE,MAAMG,IAAI,GAAG,IAAI5B,IAAI,CAAC,IAAI,CAACQ,cAAc,EAAE,IAAI,CAACJ,KAAK,EAAEuB,QAAQ,EAAEJ,KAAK,CAAC;MACvEC,KAAK,CAACK,IAAI,CAACD,IAAI,CAAC;IACpB;IACA,IAAI,CAACE,eAAe,CAACN,KAAK,EAAED,KAAK,CAAC;IAClC,OAAOC,KAAK;EAChB;EAEAM,eAAeA,CAACC,KAAK,EAAER,KAAK,EAAE;IAC1B,KAAK,IAAIE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGM,KAAK,CAACL,MAAM,EAAED,KAAK,EAAE,EAAE;MAC/C,MAAMO,WAAW,GAAG;QAChBC,CAAC,EAAEV,KAAK,CAACU,CAAC,GAAIR,KAAK,GAAG,GAAI;QAC1BS,CAAC,EAAEX,KAAK,CAACW;MACb,CAAC;MACDH,KAAK,CAACN,KAAK,CAAC,CAACU,MAAM,CAACH,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC;IACjD;EACJ;EAEAI,MAAMA,CAACH,CAAC,EAAE;IACN,IAAI,CAAClB,KAAK,CAACsB,OAAO,CAAC,IAAI,CAACtB,KAAK,CAACuB,IAAI,GAAGL,CAAC,CAAC;IACvC,IAAI,CAACnB,MAAM,CAACuB,OAAO,CAAC,IAAI,CAACvB,MAAM,CAACwB,IAAI,GAAGL,CAAC,CAAC;EAC7C;EAEAM,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMhB,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACqB,MAAM,CAACb,IAAI,IAAIY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;IAClE,IAAI,CAACtB,MAAM,CAACQ,IAAI,CAAC,GAAGL,KAAK,CAAC;IAC1B,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACqB,MAAM,CAACb,IAAI,IAAI,CAACY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;IAClE,IAAI,CAACb,eAAe,CAAC,IAAI,CAACV,KAAK,EAAE,IAAI,CAACd,SAAS,CAACc,KAAK,CAAC;IACtD,IAAI,CAACU,eAAe,CAAC,IAAI,CAACT,MAAM,EAAE,IAAI,CAACf,SAAS,CAACe,MAAM,CAAC;EAC5D;EAEAuB,UAAUA,CAACX,CAAC,EAAEO,KAAK,EAAE;IACjB,IAAI,CAAC1B,MAAM,CAACuB,OAAO,CAAC,IAAI,CAACvB,MAAM,CAACwB,IAAI,GAAGL,CAAC,CAAC;IACzC,IAAI,CAACpB,SAAS,IAAIoB,CAAC;IACnB,IAAI,IAAI,CAAC1B,QAAQ,EAAE;MACf,KAAK,MAAMkB,KAAK,IAAIe,KAAK,EAAE;QACvB,MAAMZ,IAAI,GAAG,IAAI5B,IAAI,CAAC,IAAI,CAACQ,cAAc,EAAE,IAAI,CAACJ,KAAK,EAAEoC,KAAK,CAACf,KAAK,CAAC,EAAE,IAAI,CAACnB,SAAS,CAACQ,MAAM,CAAC;QAC3F,IAAI,CAACI,IAAI,CAACW,IAAI,CAACD,IAAI,CAAC;MACxB;IACJ,CAAC,MAAM;MACH,KAAK,IAAIiB,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGZ,CAAC,EAAEY,IAAI,EAAE,EAAE;QACjC,MAAMjB,IAAI,GAAG,IAAI5B,IAAI,CAAC,IAAI,CAACQ,cAAc,EAAE,IAAI,CAACJ,KAAK,EAAE,aAAa,EAAE,IAAI,CAACE,SAAS,CAACQ,MAAM,CAAC;QAC5F,IAAI,CAACI,IAAI,CAACW,IAAI,CAACD,IAAI,CAAC;MACxB;IACJ;IACA,IAAI,CAACE,eAAe,CAAC,IAAI,CAACZ,IAAI,EAAE,IAAI,CAACZ,SAAS,CAACY,IAAI,CAAC;EACxD;EAEA4B,UAAUA,CAACC,IAAI,EAAE;IACb,IAAI,CAAC/B,MAAM,CAACqB,OAAO,CAAC,IAAI,CAACrB,MAAM,CAACsB,IAAI,GAAG,CAAC,CAAC;IACzC,IAAI,CAACzB,SAAS,IAAI,CAAC;IACnB,MAAM8B,IAAI,GAAG,IAAI,CAACpC,QAAQ,GAAE,IAAI,CAACS,MAAM,CAACgC,OAAO,CAAC,CAAC,GAAG,aAAa;IACjE,MAAMpB,IAAI,GAAG,IAAI5B,IAAI,CAAC,IAAI,CAACQ,cAAc,EAAE,IAAI,CAACJ,KAAK,EAAEuC,IAAI,EAAE,IAAI,CAACrC,SAAS,CAACU,MAAM,CAAC;IACnF,IAAI,CAACA,MAAM,CAACiC,OAAO,CAACF,IAAI,CAAC;IACzB,IAAI,CAAC7B,IAAI,CAACW,IAAI,CAACD,IAAI,CAAC;IACpB,IAAI,CAACE,eAAe,CAAC,IAAI,CAACZ,IAAI,EAAE,IAAI,CAACZ,SAAS,CAACY,IAAI,CAAC;EACxD;EAEAgC,MAAMA,CAACV,KAAK,EAAE;IACV,MAAMP,CAAC,GAAGO,KAAK,CAACd,MAAM;IACtB,IAAI,CAACb,SAAS,IAAIoB,CAAC;IACnB,IAAI,IAAI,CAAC1B,QAAQ,EAAE;MACf,MAAMiB,KAAK,GAAG,IAAI,CAACN,IAAI,CAACuB,MAAM,CAACb,IAAI,IAAIY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;MACjE,IAAI,CAACzB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACuB,MAAM,CAACb,IAAI,IAAI,CAACY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;MAChE,IAAI,CAACvB,KAAK,CAACS,IAAI,CAAC,GAAGL,KAAK,CAAC;IAC7B,CAAC,MAAM;MACH,MAAMA,KAAK,GAAG,IAAI,CAACN,IAAI,CAACiC,KAAK,CAAC,CAAClB,CAAC,CAAC;MACjC,IAAI,CAACf,IAAI,CAACkC,MAAM,CAAC,CAACnB,CAAC,CAAC;MACpB,KAAK,MAAML,IAAI,IAAIJ,KAAK,EAAE;QACtBA,KAAK,CAACI,IAAI,CAAC,CAACyB,MAAM,CAACb,KAAK,CAACZ,IAAI,CAAC,CAAC;QAC/B,IAAI,CAACR,KAAK,CAACS,IAAI,CAACL,KAAK,CAACI,IAAI,CAAC,CAAC;MAChC;IACJ;IACA,IAAI,CAACE,eAAe,CAAC,IAAI,CAACV,KAAK,EAAE,IAAI,CAACd,SAAS,CAACc,KAAK,CAAC;IACtD,IAAI,CAACU,eAAe,CAAC,IAAI,CAACZ,IAAI,EAAE,IAAI,CAACZ,SAAS,CAACY,IAAI,CAAC;EACxD;EAEAoC,UAAUA,CAAA,EAAG;IACT,IAAI,CAAClC,KAAK,CAACmC,OAAO,CAAC3B,IAAI,IAAIA,IAAI,CAACO,MAAM,CAAC,IAAI,CAAC7B,SAAS,CAACS,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1E,IAAI,CAACK,KAAK,GAAG,EAAE;EACnB;EAEAoC,aAAaA,CAAChB,KAAK,EAAE;IACjB,MAAMhB,KAAK,GAAG,IAAI,CAACH,MAAM,CAACoB,MAAM,CAACb,IAAI,IAAIY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;IACnEnB,KAAK,CAAC+B,OAAO,CAAC3B,IAAI,IAAIA,IAAI,CAACO,MAAM,CAAC,IAAI,CAAC7B,SAAS,CAACS,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACrE,IAAI,CAACM,MAAM,GAAG,IAAI,CAACA,MAAM,CAACoB,MAAM,CAACb,IAAI,IAAI,CAACY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;IACpE,IAAI,CAACb,eAAe,CAAC,IAAI,CAACT,MAAM,EAAE,IAAI,CAACf,SAAS,CAACe,MAAM,CAAC;EAC5D;EAEAoC,WAAWA,CAACxB,CAAC,EAAEO,KAAK,EAAE;IAClB,IAAI,CAAC3B,SAAS,IAAIoB,CAAC;IACnB,IAAI,CAAClB,KAAK,CAACsB,OAAO,CAAC,IAAI,CAACtB,KAAK,CAACuB,IAAI,GAAGL,CAAC,CAAC;IAEvC,MAAMyB,gBAAgB,GAAIlC,KAAK,IAAK;MAChCA,KAAK,CAAC+B,OAAO,CAAC3B,IAAI,IAAIA,IAAI,CAACO,MAAM,CAAC,IAAI,CAAC7B,SAAS,CAACS,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACzE,CAAC;IAED,IAAI,IAAI,CAACR,QAAQ,EAAE;MACf,MAAMiB,KAAK,GAAG,IAAI,CAACN,IAAI,CAACuB,MAAM,CAACb,IAAI,IAAIY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;MACjE,IAAI,CAACzB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACuB,MAAM,CAACb,IAAI,IAAI,CAACY,KAAK,CAACE,QAAQ,CAACd,IAAI,CAACe,IAAI,CAAC,CAAC;MAChEe,gBAAgB,CAAClC,KAAK,CAAC;IAC3B,CAAC,MAAM;MACH,MAAMA,KAAK,GAAG,IAAI,CAACN,IAAI,CAACiC,KAAK,CAAC,CAAClB,CAAC,CAAC;MACjC,IAAI,CAACf,IAAI,CAACkC,MAAM,CAAC,CAACnB,CAAC,CAAC;MACpByB,gBAAgB,CAAClC,KAAK,CAAC;IAC3B;IAEA,IAAI,CAACM,eAAe,CAAC,IAAI,CAACZ,IAAI,EAAE,IAAI,CAACZ,SAAS,CAACY,IAAI,CAAC;EACxD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}