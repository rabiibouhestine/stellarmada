{"ast":null,"code":"import { TYPES, FORMATS, BufferResource } from '@pixi/core';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const.mjs';\nimport '../resources/index.mjs';\nimport { CompressedTextureResource } from '../resources/CompressedTextureResource.mjs';\nconst FILE_IDENTIFIER = [171, 75, 84, 88, 32, 49, 49, 187, 13, 10, 26, 10];\nconst ENDIANNESS = 67305985;\nconst KTX_FIELDS = {\n  FILE_IDENTIFIER: 0,\n  ENDIANNESS: 12,\n  GL_TYPE: 16,\n  GL_TYPE_SIZE: 20,\n  GL_FORMAT: 24,\n  GL_INTERNAL_FORMAT: 28,\n  GL_BASE_INTERNAL_FORMAT: 32,\n  PIXEL_WIDTH: 36,\n  PIXEL_HEIGHT: 40,\n  PIXEL_DEPTH: 44,\n  NUMBER_OF_ARRAY_ELEMENTS: 48,\n  NUMBER_OF_FACES: 52,\n  NUMBER_OF_MIPMAP_LEVELS: 56,\n  BYTES_OF_KEY_VALUE_DATA: 60\n};\nconst FILE_HEADER_SIZE = 64;\nconst TYPES_TO_BYTES_PER_COMPONENT = {\n  [TYPES.UNSIGNED_BYTE]: 1,\n  [TYPES.UNSIGNED_SHORT]: 2,\n  [TYPES.INT]: 4,\n  [TYPES.UNSIGNED_INT]: 4,\n  [TYPES.FLOAT]: 4,\n  [TYPES.HALF_FLOAT]: 8\n};\nconst FORMATS_TO_COMPONENTS = {\n  [FORMATS.RGBA]: 4,\n  [FORMATS.RGB]: 3,\n  [FORMATS.RG]: 2,\n  [FORMATS.RED]: 1,\n  [FORMATS.LUMINANCE]: 1,\n  [FORMATS.LUMINANCE_ALPHA]: 2,\n  [FORMATS.ALPHA]: 1\n};\nconst TYPES_TO_BYTES_PER_PIXEL = {\n  [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n  [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n  [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\nfunction parseKTX(url, arrayBuffer, loadKeyValueData = false) {\n  const dataView = new DataView(arrayBuffer);\n  if (!validate(url, dataView)) {\n    return null;\n  }\n  const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n  const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n  const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n  const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n  const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n  const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;\n  const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;\n  const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;\n  const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n  const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n  const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n  if (pixelHeight === 0 || pixelDepth !== 1) {\n    throw new Error(\"Only 2D textures are supported\");\n  }\n  if (numberOfFaces !== 1) {\n    throw new Error(\"CubeTextures are not supported by KTXLoader yet!\");\n  }\n  if (numberOfArrayElements !== 1) {\n    throw new Error(\"WebGL does not support array textures\");\n  }\n  const blockWidth = 4;\n  const blockHeight = 4;\n  const alignedWidth = pixelWidth + 3 & ~3;\n  const alignedHeight = pixelHeight + 3 & ~3;\n  const imageBuffers = new Array(numberOfArrayElements);\n  let imagePixels = pixelWidth * pixelHeight;\n  if (glType === 0) {\n    imagePixels = alignedWidth * alignedHeight;\n  }\n  let imagePixelByteSize;\n  if (glType !== 0) {\n    if (TYPES_TO_BYTES_PER_COMPONENT[glType]) {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n    } else {\n      imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n    }\n  } else {\n    imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n  }\n  if (imagePixelByteSize === void 0) {\n    throw new Error(\"Unable to resolve the pixel format stored in the *.ktx file!\");\n  }\n  const kvData = loadKeyValueData ? parseKvData(dataView, bytesOfKeyValueData, littleEndian) : null;\n  const imageByteSize = imagePixels * imagePixelByteSize;\n  let mipByteSize = imageByteSize;\n  let mipWidth = pixelWidth;\n  let mipHeight = pixelHeight;\n  let alignedMipWidth = alignedWidth;\n  let alignedMipHeight = alignedHeight;\n  let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n  for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++) {\n    const imageSize = dataView.getUint32(imageOffset, littleEndian);\n    let elementOffset = imageOffset + 4;\n    for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++) {\n      let mips = imageBuffers[arrayElement];\n      if (!mips) {\n        mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n      }\n      mips[mipmapLevel] = {\n        levelID: mipmapLevel,\n        levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n        levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n        levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n      };\n      elementOffset += mipByteSize;\n    }\n    imageOffset += imageSize + 4;\n    imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - imageOffset % 4 : imageOffset;\n    mipWidth = mipWidth >> 1 || 1;\n    mipHeight = mipHeight >> 1 || 1;\n    alignedMipWidth = mipWidth + blockWidth - 1 & ~(blockWidth - 1);\n    alignedMipHeight = mipHeight + blockHeight - 1 & ~(blockHeight - 1);\n    mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n  }\n  if (glType !== 0) {\n    return {\n      uncompressed: imageBuffers.map(levelBuffers => {\n        let buffer = levelBuffers[0].levelBuffer;\n        let convertToInt = false;\n        if (glType === TYPES.FLOAT) {\n          buffer = new Float32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === TYPES.UNSIGNED_INT) {\n          convertToInt = true;\n          buffer = new Uint32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        } else if (glType === TYPES.INT) {\n          convertToInt = true;\n          buffer = new Int32Array(levelBuffers[0].levelBuffer.buffer, levelBuffers[0].levelBuffer.byteOffset, levelBuffers[0].levelBuffer.byteLength / 4);\n        }\n        return {\n          resource: new BufferResource(buffer, {\n            width: levelBuffers[0].levelWidth,\n            height: levelBuffers[0].levelHeight\n          }),\n          type: glType,\n          format: convertToInt ? convertFormatToInteger(glFormat) : glFormat\n        };\n      }),\n      kvData\n    };\n  }\n  return {\n    compressed: imageBuffers.map(levelBuffers => new CompressedTextureResource(null, {\n      format: glInternalFormat,\n      width: pixelWidth,\n      height: pixelHeight,\n      levels: numberOfMipmapLevels,\n      levelBuffers\n    })),\n    kvData\n  };\n}\nfunction validate(url, dataView) {\n  for (let i = 0; i < FILE_IDENTIFIER.length; i++) {\n    if (dataView.getUint8(i) !== FILE_IDENTIFIER[i]) {\n      console.error(`${url} is not a valid *.ktx file!`);\n      return false;\n    }\n  }\n  return true;\n}\nfunction convertFormatToInteger(format) {\n  switch (format) {\n    case FORMATS.RGBA:\n      return FORMATS.RGBA_INTEGER;\n    case FORMATS.RGB:\n      return FORMATS.RGB_INTEGER;\n    case FORMATS.RG:\n      return FORMATS.RG_INTEGER;\n    case FORMATS.RED:\n      return FORMATS.RED_INTEGER;\n    default:\n      return format;\n  }\n}\nfunction parseKvData(dataView, bytesOfKeyValueData, littleEndian) {\n  const kvData = /* @__PURE__ */new Map();\n  let bytesIntoKeyValueData = 0;\n  while (bytesIntoKeyValueData < bytesOfKeyValueData) {\n    const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n    const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n    const valuePadding = 3 - (keyAndValueByteSize + 3) % 4;\n    if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData) {\n      console.error(\"KTXLoader: keyAndValueByteSize out of bounds\");\n      break;\n    }\n    let keyNulByte = 0;\n    for (; keyNulByte < keyAndValueByteSize; keyNulByte++) {\n      if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0) {\n        break;\n      }\n    }\n    if (keyNulByte === -1) {\n      console.error(\"KTXLoader: Failed to find null byte terminating kvData key\");\n      break;\n    }\n    const key = new TextDecoder().decode(new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte));\n    const value = new DataView(dataView.buffer, keyAndValueByteOffset + keyNulByte + 1, keyAndValueByteSize - keyNulByte - 1);\n    kvData.set(key, value);\n    bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n  }\n  return kvData;\n}\nexport { FORMATS_TO_COMPONENTS, TYPES_TO_BYTES_PER_COMPONENT, TYPES_TO_BYTES_PER_PIXEL, parseKTX };","map":{"version":3,"names":["FILE_IDENTIFIER","ENDIANNESS","KTX_FIELDS","GL_TYPE","GL_TYPE_SIZE","GL_FORMAT","GL_INTERNAL_FORMAT","GL_BASE_INTERNAL_FORMAT","PIXEL_WIDTH","PIXEL_HEIGHT","PIXEL_DEPTH","NUMBER_OF_ARRAY_ELEMENTS","NUMBER_OF_FACES","NUMBER_OF_MIPMAP_LEVELS","BYTES_OF_KEY_VALUE_DATA","FILE_HEADER_SIZE","TYPES_TO_BYTES_PER_COMPONENT","TYPES","UNSIGNED_BYTE","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT","FORMATS_TO_COMPONENTS","FORMATS","RGBA","RGB","RG","RED","LUMINANCE","LUMINANCE_ALPHA","ALPHA","TYPES_TO_BYTES_PER_PIXEL","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","parseKTX","url","arrayBuffer","loadKeyValueData","dataView","DataView","validate","littleEndian","getUint32","glType","glFormat","glInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","Error","blockWidth","blockHeight","alignedWidth","alignedHeight","imageBuffers","Array","imagePixels","imagePixelByteSize","INTERNAL_FORMAT_TO_BYTES_PER_PIXEL","kvData","parseKvData","imageByteSize","mipByteSize","mipWidth","mipHeight","alignedMipWidth","alignedMipHeight","imageOffset","mipmapLevel","imageSize","elementOffset","arrayElement","mips","levelID","levelWidth","levelHeight","levelBuffer","Uint8Array","uncompressed","map","levelBuffers","buffer","convertToInt","Float32Array","byteOffset","byteLength","Uint32Array","Int32Array","resource","BufferResource","width","height","type","format","convertFormatToInteger","compressed","CompressedTextureResource","levels","i","length","getUint8","console","error","RGBA_INTEGER","RGB_INTEGER","RG_INTEGER","RED_INTEGER","Map","bytesIntoKeyValueData","keyAndValueByteSize","keyAndValueByteOffset","valuePadding","keyNulByte","key","TextDecoder","decode","value","set"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/compressed-textures/src/parsers/parseKTX.ts"],"sourcesContent":["import { BufferResource, FORMATS, TYPES } from '@pixi/core';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nimport type { CompressedLevelBuffer } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            // #if _DEBUG\n            console.error(`${url} is not a valid *.ktx file!`);\n            // #endif\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}