{"ast":null,"code":"import { Point, utils } from '@pixi/core';\nimport { EventsTicker } from './EventTicker.mjs';\nimport { FederatedMouseEvent } from './FederatedMouseEvent.mjs';\nimport { FederatedPointerEvent } from './FederatedPointerEvent.mjs';\nimport { FederatedWheelEvent } from './FederatedWheelEvent.mjs';\nconst PROPAGATION_LIMIT = 2048;\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\nclass EventBoundary {\n  constructor(rootTarget) {\n    this.dispatch = new utils.EventEmitter();\n    this.moveOnAll = false;\n    this.enableGlobalMoveEvents = true;\n    this.mappingState = {\n      trackingData: {}\n    };\n    this.eventPool = /* @__PURE__ */new Map();\n    this._allInteractiveElements = [];\n    this._hitElements = [];\n    this._isPointerMoveEvent = false;\n    this.rootTarget = rootTarget;\n    this.hitPruneFn = this.hitPruneFn.bind(this);\n    this.hitTestFn = this.hitTestFn.bind(this);\n    this.mapPointerDown = this.mapPointerDown.bind(this);\n    this.mapPointerMove = this.mapPointerMove.bind(this);\n    this.mapPointerOut = this.mapPointerOut.bind(this);\n    this.mapPointerOver = this.mapPointerOver.bind(this);\n    this.mapPointerUp = this.mapPointerUp.bind(this);\n    this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n    this.mapWheel = this.mapWheel.bind(this);\n    this.mappingTable = {};\n    this.addEventMapping(\"pointerdown\", this.mapPointerDown);\n    this.addEventMapping(\"pointermove\", this.mapPointerMove);\n    this.addEventMapping(\"pointerout\", this.mapPointerOut);\n    this.addEventMapping(\"pointerleave\", this.mapPointerOut);\n    this.addEventMapping(\"pointerover\", this.mapPointerOver);\n    this.addEventMapping(\"pointerup\", this.mapPointerUp);\n    this.addEventMapping(\"pointerupoutside\", this.mapPointerUpOutside);\n    this.addEventMapping(\"wheel\", this.mapWheel);\n  }\n  addEventMapping(type, fn) {\n    if (!this.mappingTable[type]) {\n      this.mappingTable[type] = [];\n    }\n    this.mappingTable[type].push({\n      fn,\n      priority: 0\n    });\n    this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n  }\n  dispatchEvent(e, type) {\n    e.propagationStopped = false;\n    e.propagationImmediatelyStopped = false;\n    this.propagate(e, type);\n    this.dispatch.emit(type || e.type, e);\n  }\n  mapEvent(e) {\n    if (!this.rootTarget) {\n      return;\n    }\n    const mappers = this.mappingTable[e.type];\n    if (mappers) {\n      for (let i = 0, j = mappers.length; i < j; i++) {\n        mappers[i].fn(e);\n      }\n    } else {\n      console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n    }\n  }\n  hitTest(x, y) {\n    EventsTicker.pauseUpdate = true;\n    const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n    const fn = useMove ? \"hitTestMoveRecursive\" : \"hitTestRecursive\";\n    const invertedPath = this[fn](this.rootTarget, this.rootTarget.eventMode, tempHitLocation.set(x, y), this.hitTestFn, this.hitPruneFn);\n    return invertedPath && invertedPath[0];\n  }\n  propagate(e, type) {\n    if (!e.target) {\n      return;\n    }\n    const composedPath = e.composedPath();\n    e.eventPhase = e.CAPTURING_PHASE;\n    for (let i = 0, j = composedPath.length - 1; i < j; i++) {\n      e.currentTarget = composedPath[i];\n      this.notifyTarget(e, type);\n      if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n    }\n    e.eventPhase = e.AT_TARGET;\n    e.currentTarget = e.target;\n    this.notifyTarget(e, type);\n    if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n    e.eventPhase = e.BUBBLING_PHASE;\n    for (let i = composedPath.length - 2; i >= 0; i--) {\n      e.currentTarget = composedPath[i];\n      this.notifyTarget(e, type);\n      if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n    }\n  }\n  all(e, type, targets = this._allInteractiveElements) {\n    if (targets.length === 0) return;\n    e.eventPhase = e.BUBBLING_PHASE;\n    const events = Array.isArray(type) ? type : [type];\n    for (let i = targets.length - 1; i >= 0; i--) {\n      events.forEach(event => {\n        e.currentTarget = targets[i];\n        this.notifyTarget(e, event);\n      });\n    }\n  }\n  propagationPath(target) {\n    const propagationPath = [target];\n    for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++) {\n      if (!target.parent) {\n        throw new Error(\"Cannot find propagation path to disconnected target\");\n      }\n      propagationPath.push(target.parent);\n      target = target.parent;\n    }\n    propagationPath.reverse();\n    return propagationPath;\n  }\n  hitTestMoveRecursive(currentTarget, eventMode, location, testFn, pruneFn, ignore = false) {\n    let shouldReturn = false;\n    if (this._interactivePrune(currentTarget)) return null;\n    if (currentTarget.eventMode === \"dynamic\" || eventMode === \"dynamic\") {\n      EventsTicker.pauseUpdate = false;\n    }\n    if (currentTarget.interactiveChildren && currentTarget.children) {\n      const children = currentTarget.children;\n      for (let i = children.length - 1; i >= 0; i--) {\n        const child = children[i];\n        const nestedHit = this.hitTestMoveRecursive(child, this._isInteractive(eventMode) ? eventMode : child.eventMode, location, testFn, pruneFn, ignore || pruneFn(currentTarget, location));\n        if (nestedHit) {\n          if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent) {\n            continue;\n          }\n          const isInteractive = currentTarget.isInteractive();\n          if (nestedHit.length > 0 || isInteractive) {\n            if (isInteractive) this._allInteractiveElements.push(currentTarget);\n            nestedHit.push(currentTarget);\n          }\n          if (this._hitElements.length === 0) this._hitElements = nestedHit;\n          shouldReturn = true;\n        }\n      }\n    }\n    const isInteractiveMode = this._isInteractive(eventMode);\n    const isInteractiveTarget = currentTarget.isInteractive();\n    if (isInteractiveTarget && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n    if (ignore || this._hitElements.length > 0) return null;\n    if (shouldReturn) return this._hitElements;\n    if (isInteractiveMode && !pruneFn(currentTarget, location) && testFn(currentTarget, location)) {\n      return isInteractiveTarget ? [currentTarget] : [];\n    }\n    return null;\n  }\n  hitTestRecursive(currentTarget, eventMode, location, testFn, pruneFn) {\n    if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location)) {\n      return null;\n    }\n    if (currentTarget.eventMode === \"dynamic\" || eventMode === \"dynamic\") {\n      EventsTicker.pauseUpdate = false;\n    }\n    if (currentTarget.interactiveChildren && currentTarget.children) {\n      const children = currentTarget.children;\n      for (let i = children.length - 1; i >= 0; i--) {\n        const child = children[i];\n        const nestedHit = this.hitTestRecursive(child, this._isInteractive(eventMode) ? eventMode : child.eventMode, location, testFn, pruneFn);\n        if (nestedHit) {\n          if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent) {\n            continue;\n          }\n          const isInteractive = currentTarget.isInteractive();\n          if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n          return nestedHit;\n        }\n      }\n    }\n    const isInteractiveMode = this._isInteractive(eventMode);\n    const isInteractiveTarget = currentTarget.isInteractive();\n    if (isInteractiveMode && testFn(currentTarget, location)) {\n      return isInteractiveTarget ? [currentTarget] : [];\n    }\n    return null;\n  }\n  _isInteractive(int) {\n    return int === \"static\" || int === \"dynamic\";\n  }\n  _interactivePrune(displayObject) {\n    if (!displayObject || displayObject.isMask || !displayObject.visible || !displayObject.renderable) {\n      return true;\n    }\n    if (displayObject.eventMode === \"none\") {\n      return true;\n    }\n    if (displayObject.eventMode === \"passive\" && !displayObject.interactiveChildren) {\n      return true;\n    }\n    if (displayObject.isMask) {\n      return true;\n    }\n    return false;\n  }\n  hitPruneFn(displayObject, location) {\n    if (displayObject.hitArea) {\n      displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n      if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y)) {\n        return true;\n      }\n    }\n    if (displayObject._mask) {\n      const maskObject = displayObject._mask.isMaskData ? displayObject._mask.maskObject : displayObject._mask;\n      if (maskObject && !maskObject.containsPoint?.(location)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  hitTestFn(displayObject, location) {\n    if (displayObject.eventMode === \"passive\") {\n      return false;\n    }\n    if (displayObject.hitArea) {\n      return true;\n    }\n    if (displayObject.containsPoint) {\n      return displayObject.containsPoint(location);\n    }\n    return false;\n  }\n  notifyTarget(e, type) {\n    type = type ?? e.type;\n    const handlerKey = `on${type}`;\n    e.currentTarget[handlerKey]?.(e);\n    const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n    this.notifyListeners(e, key);\n    if (e.eventPhase === e.AT_TARGET) {\n      this.notifyListeners(e, type);\n    }\n  }\n  mapPointerDown(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const e = this.createPointerEvent(from);\n    this.dispatchEvent(e, \"pointerdown\");\n    if (e.pointerType === \"touch\") {\n      this.dispatchEvent(e, \"touchstart\");\n    } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n      const isRightButton = e.button === 2;\n      this.dispatchEvent(e, isRightButton ? \"rightdown\" : \"mousedown\");\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    trackingData.pressTargetsByButton[from.button] = e.composedPath();\n    this.freeEvent(e);\n  }\n  mapPointerMove(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    this._allInteractiveElements.length = 0;\n    this._hitElements.length = 0;\n    this._isPointerMoveEvent = true;\n    const e = this.createPointerEvent(from);\n    this._isPointerMoveEvent = false;\n    const isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n    const trackingData = this.trackingData(from.pointerId);\n    const outTarget = this.findMountedTarget(trackingData.overTargets);\n    if (trackingData.overTargets?.length > 0 && outTarget !== e.target) {\n      const outType = from.type === \"mousemove\" ? \"mouseout\" : \"pointerout\";\n      const outEvent = this.createPointerEvent(from, outType, outTarget);\n      this.dispatchEvent(outEvent, \"pointerout\");\n      if (isMouse) this.dispatchEvent(outEvent, \"mouseout\");\n      if (!e.composedPath().includes(outTarget)) {\n        const leaveEvent = this.createPointerEvent(from, \"pointerleave\", outTarget);\n        leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n        while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target)) {\n          leaveEvent.currentTarget = leaveEvent.target;\n          this.notifyTarget(leaveEvent);\n          if (isMouse) this.notifyTarget(leaveEvent, \"mouseleave\");\n          leaveEvent.target = leaveEvent.target.parent;\n        }\n        this.freeEvent(leaveEvent);\n      }\n      this.freeEvent(outEvent);\n    }\n    if (outTarget !== e.target) {\n      const overType = from.type === \"mousemove\" ? \"mouseover\" : \"pointerover\";\n      const overEvent = this.clonePointerEvent(e, overType);\n      this.dispatchEvent(overEvent, \"pointerover\");\n      if (isMouse) this.dispatchEvent(overEvent, \"mouseover\");\n      let overTargetAncestor = outTarget?.parent;\n      while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent) {\n        if (overTargetAncestor === e.target) break;\n        overTargetAncestor = overTargetAncestor.parent;\n      }\n      const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n      if (didPointerEnter) {\n        const enterEvent = this.clonePointerEvent(e, \"pointerenter\");\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n        while (enterEvent.target && enterEvent.target !== outTarget && enterEvent.target !== this.rootTarget.parent) {\n          enterEvent.currentTarget = enterEvent.target;\n          this.notifyTarget(enterEvent);\n          if (isMouse) this.notifyTarget(enterEvent, \"mouseenter\");\n          enterEvent.target = enterEvent.target.parent;\n        }\n        this.freeEvent(enterEvent);\n      }\n      this.freeEvent(overEvent);\n    }\n    const allMethods = [];\n    const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n    this.moveOnAll ? allMethods.push(\"pointermove\") : this.dispatchEvent(e, \"pointermove\");\n    allowGlobalPointerEvents && allMethods.push(\"globalpointermove\");\n    if (e.pointerType === \"touch\") {\n      this.moveOnAll ? allMethods.splice(1, 0, \"touchmove\") : this.dispatchEvent(e, \"touchmove\");\n      allowGlobalPointerEvents && allMethods.push(\"globaltouchmove\");\n    }\n    if (isMouse) {\n      this.moveOnAll ? allMethods.splice(1, 0, \"mousemove\") : this.dispatchEvent(e, \"mousemove\");\n      allowGlobalPointerEvents && allMethods.push(\"globalmousemove\");\n      this.cursor = e.target?.cursor;\n    }\n    if (allMethods.length > 0) {\n      this.all(e, allMethods);\n    }\n    this._allInteractiveElements.length = 0;\n    this._hitElements.length = 0;\n    trackingData.overTargets = e.composedPath();\n    this.freeEvent(e);\n  }\n  mapPointerOver(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const e = this.createPointerEvent(from);\n    const isMouse = e.pointerType === \"mouse\" || e.pointerType === \"pen\";\n    this.dispatchEvent(e, \"pointerover\");\n    if (isMouse) this.dispatchEvent(e, \"mouseover\");\n    if (e.pointerType === \"mouse\") this.cursor = e.target?.cursor;\n    const enterEvent = this.clonePointerEvent(e, \"pointerenter\");\n    enterEvent.eventPhase = enterEvent.AT_TARGET;\n    while (enterEvent.target && enterEvent.target !== this.rootTarget.parent) {\n      enterEvent.currentTarget = enterEvent.target;\n      this.notifyTarget(enterEvent);\n      if (isMouse) this.notifyTarget(enterEvent, \"mouseenter\");\n      enterEvent.target = enterEvent.target.parent;\n    }\n    trackingData.overTargets = e.composedPath();\n    this.freeEvent(e);\n    this.freeEvent(enterEvent);\n  }\n  mapPointerOut(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    if (trackingData.overTargets) {\n      const isMouse = from.pointerType === \"mouse\" || from.pointerType === \"pen\";\n      const outTarget = this.findMountedTarget(trackingData.overTargets);\n      const outEvent = this.createPointerEvent(from, \"pointerout\", outTarget);\n      this.dispatchEvent(outEvent);\n      if (isMouse) this.dispatchEvent(outEvent, \"mouseout\");\n      const leaveEvent = this.createPointerEvent(from, \"pointerleave\", outTarget);\n      leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n      while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent) {\n        leaveEvent.currentTarget = leaveEvent.target;\n        this.notifyTarget(leaveEvent);\n        if (isMouse) this.notifyTarget(leaveEvent, \"mouseleave\");\n        leaveEvent.target = leaveEvent.target.parent;\n      }\n      trackingData.overTargets = null;\n      this.freeEvent(outEvent);\n      this.freeEvent(leaveEvent);\n    }\n    this.cursor = null;\n  }\n  mapPointerUp(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const now = performance.now();\n    const e = this.createPointerEvent(from);\n    this.dispatchEvent(e, \"pointerup\");\n    if (e.pointerType === \"touch\") {\n      this.dispatchEvent(e, \"touchend\");\n    } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n      const isRightButton = e.button === 2;\n      this.dispatchEvent(e, isRightButton ? \"rightup\" : \"mouseup\");\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n    let clickTarget = pressTarget;\n    if (pressTarget && !e.composedPath().includes(pressTarget)) {\n      let currentTarget = pressTarget;\n      while (currentTarget && !e.composedPath().includes(currentTarget)) {\n        e.currentTarget = currentTarget;\n        this.notifyTarget(e, \"pointerupoutside\");\n        if (e.pointerType === \"touch\") {\n          this.notifyTarget(e, \"touchendoutside\");\n        } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n          const isRightButton = e.button === 2;\n          this.notifyTarget(e, isRightButton ? \"rightupoutside\" : \"mouseupoutside\");\n        }\n        currentTarget = currentTarget.parent;\n      }\n      delete trackingData.pressTargetsByButton[from.button];\n      clickTarget = currentTarget;\n    }\n    if (clickTarget) {\n      const clickEvent = this.clonePointerEvent(e, \"click\");\n      clickEvent.target = clickTarget;\n      clickEvent.path = null;\n      if (!trackingData.clicksByButton[from.button]) {\n        trackingData.clicksByButton[from.button] = {\n          clickCount: 0,\n          target: clickEvent.target,\n          timeStamp: now\n        };\n      }\n      const clickHistory = trackingData.clicksByButton[from.button];\n      if (clickHistory.target === clickEvent.target && now - clickHistory.timeStamp < 200) {\n        ++clickHistory.clickCount;\n      } else {\n        clickHistory.clickCount = 1;\n      }\n      clickHistory.target = clickEvent.target;\n      clickHistory.timeStamp = now;\n      clickEvent.detail = clickHistory.clickCount;\n      if (clickEvent.pointerType === \"mouse\") {\n        const isRightButton = clickEvent.button === 2;\n        this.dispatchEvent(clickEvent, isRightButton ? \"rightclick\" : \"click\");\n      } else if (clickEvent.pointerType === \"touch\") {\n        this.dispatchEvent(clickEvent, \"tap\");\n      }\n      this.dispatchEvent(clickEvent, \"pointertap\");\n      this.freeEvent(clickEvent);\n    }\n    this.freeEvent(e);\n  }\n  mapPointerUpOutside(from) {\n    if (!(from instanceof FederatedPointerEvent)) {\n      console.warn(\"EventBoundary cannot map a non-pointer event as a pointer event\");\n      return;\n    }\n    const trackingData = this.trackingData(from.pointerId);\n    const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n    const e = this.createPointerEvent(from);\n    if (pressTarget) {\n      let currentTarget = pressTarget;\n      while (currentTarget) {\n        e.currentTarget = currentTarget;\n        this.notifyTarget(e, \"pointerupoutside\");\n        if (e.pointerType === \"touch\") {\n          this.notifyTarget(e, \"touchendoutside\");\n        } else if (e.pointerType === \"mouse\" || e.pointerType === \"pen\") {\n          this.notifyTarget(e, e.button === 2 ? \"rightupoutside\" : \"mouseupoutside\");\n        }\n        currentTarget = currentTarget.parent;\n      }\n      delete trackingData.pressTargetsByButton[from.button];\n    }\n    this.freeEvent(e);\n  }\n  mapWheel(from) {\n    if (!(from instanceof FederatedWheelEvent)) {\n      console.warn(\"EventBoundary cannot map a non-wheel event as a wheel event\");\n      return;\n    }\n    const wheelEvent = this.createWheelEvent(from);\n    this.dispatchEvent(wheelEvent);\n    this.freeEvent(wheelEvent);\n  }\n  findMountedTarget(propagationPath) {\n    if (!propagationPath) {\n      return null;\n    }\n    let currentTarget = propagationPath[0];\n    for (let i = 1; i < propagationPath.length; i++) {\n      if (propagationPath[i].parent === currentTarget) {\n        currentTarget = propagationPath[i];\n      } else {\n        break;\n      }\n    }\n    return currentTarget;\n  }\n  createPointerEvent(from, type, target) {\n    const event = this.allocateEvent(FederatedPointerEvent);\n    this.copyPointerData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from;\n    event.target = target ?? this.hitTest(event.global.x, event.global.y) ?? this._hitElements[0];\n    if (typeof type === \"string\") {\n      event.type = type;\n    }\n    return event;\n  }\n  createWheelEvent(from) {\n    const event = this.allocateEvent(FederatedWheelEvent);\n    this.copyWheelData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from;\n    event.target = this.hitTest(event.global.x, event.global.y);\n    return event;\n  }\n  clonePointerEvent(from, type) {\n    const event = this.allocateEvent(FederatedPointerEvent);\n    event.nativeEvent = from.nativeEvent;\n    event.originalEvent = from.originalEvent;\n    this.copyPointerData(from, event);\n    this.copyMouseData(from, event);\n    this.copyData(from, event);\n    event.target = from.target;\n    event.path = from.composedPath().slice();\n    event.type = type ?? event.type;\n    return event;\n  }\n  copyWheelData(from, to) {\n    to.deltaMode = from.deltaMode;\n    to.deltaX = from.deltaX;\n    to.deltaY = from.deltaY;\n    to.deltaZ = from.deltaZ;\n  }\n  copyPointerData(from, to) {\n    if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n    to.pointerId = from.pointerId;\n    to.width = from.width;\n    to.height = from.height;\n    to.isPrimary = from.isPrimary;\n    to.pointerType = from.pointerType;\n    to.pressure = from.pressure;\n    to.tangentialPressure = from.tangentialPressure;\n    to.tiltX = from.tiltX;\n    to.tiltY = from.tiltY;\n    to.twist = from.twist;\n  }\n  copyMouseData(from, to) {\n    if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n    to.altKey = from.altKey;\n    to.button = from.button;\n    to.buttons = from.buttons;\n    to.client.copyFrom(from.client);\n    to.ctrlKey = from.ctrlKey;\n    to.metaKey = from.metaKey;\n    to.movement.copyFrom(from.movement);\n    to.screen.copyFrom(from.screen);\n    to.shiftKey = from.shiftKey;\n    to.global.copyFrom(from.global);\n  }\n  copyData(from, to) {\n    to.isTrusted = from.isTrusted;\n    to.srcElement = from.srcElement;\n    to.timeStamp = performance.now();\n    to.type = from.type;\n    to.detail = from.detail;\n    to.view = from.view;\n    to.which = from.which;\n    to.layer.copyFrom(from.layer);\n    to.page.copyFrom(from.page);\n  }\n  trackingData(id) {\n    if (!this.mappingState.trackingData[id]) {\n      this.mappingState.trackingData[id] = {\n        pressTargetsByButton: {},\n        clicksByButton: {},\n        overTarget: null\n      };\n    }\n    return this.mappingState.trackingData[id];\n  }\n  allocateEvent(constructor) {\n    if (!this.eventPool.has(constructor)) {\n      this.eventPool.set(constructor, []);\n    }\n    const event = this.eventPool.get(constructor).pop() || new constructor(this);\n    event.eventPhase = event.NONE;\n    event.currentTarget = null;\n    event.path = null;\n    event.target = null;\n    return event;\n  }\n  freeEvent(event) {\n    if (event.manager !== this) throw new Error(\"It is illegal to free an event not managed by this EventBoundary!\");\n    const constructor = event.constructor;\n    if (!this.eventPool.has(constructor)) {\n      this.eventPool.set(constructor, []);\n    }\n    this.eventPool.get(constructor).push(event);\n  }\n  notifyListeners(e, type) {\n    const listeners = e.currentTarget._events[type];\n    if (!listeners) return;\n    if (!e.currentTarget.isInteractive()) return;\n    if (\"fn\" in listeners) {\n      if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, void 0, true);\n      listeners.fn.call(listeners.context, e);\n    } else {\n      for (let i = 0, j = listeners.length; i < j && !e.propagationImmediatelyStopped; i++) {\n        if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, void 0, true);\n        listeners[i].fn.call(listeners[i].context, e);\n      }\n    }\n  }\n}\nexport { EventBoundary };","map":{"version":3,"names":["PROPAGATION_LIMIT","tempHitLocation","Point","tempLocalMapping","EventBoundary","constructor","rootTarget","dispatch","utils","EventEmitter","moveOnAll","enableGlobalMoveEvents","mappingState","trackingData","eventPool","Map","_allInteractiveElements","_hitElements","_isPointerMoveEvent","hitPruneFn","bind","hitTestFn","mapPointerDown","mapPointerMove","mapPointerOut","mapPointerOver","mapPointerUp","mapPointerUpOutside","mapWheel","mappingTable","addEventMapping","type","fn","push","priority","sort","a","b","dispatchEvent","e","propagationStopped","propagationImmediatelyStopped","propagate","emit","mapEvent","mappers","i","j","length","console","warn","hitTest","x","y","EventsTicker","pauseUpdate","useMove","invertedPath","eventMode","set","target","composedPath","eventPhase","CAPTURING_PHASE","currentTarget","notifyTarget","AT_TARGET","BUBBLING_PHASE","all","targets","events","Array","isArray","forEach","event","propagationPath","parent","Error","reverse","hitTestMoveRecursive","location","testFn","pruneFn","ignore","shouldReturn","_interactivePrune","interactiveChildren","children","child","nestedHit","_isInteractive","isInteractive","isInteractiveMode","isInteractiveTarget","hitTestRecursive","int","displayObject","isMask","visible","renderable","hitArea","worldTransform","applyInverse","contains","_mask","maskObject","isMaskData","containsPoint","handlerKey","key","notifyListeners","from","FederatedPointerEvent","createPointerEvent","pointerType","isRightButton","button","pointerId","pressTargetsByButton","freeEvent","isMouse","outTarget","findMountedTarget","overTargets","outType","outEvent","includes","leaveEvent","overType","overEvent","clonePointerEvent","overTargetAncestor","didPointerEnter","enterEvent","allMethods","allowGlobalPointerEvents","splice","cursor","now","performance","pressTarget","clickTarget","clickEvent","path","clicksByButton","clickCount","timeStamp","clickHistory","detail","FederatedWheelEvent","wheelEvent","createWheelEvent","allocateEvent","copyPointerData","copyMouseData","copyData","nativeEvent","originalEvent","global","copyWheelData","slice","to","deltaMode","deltaX","deltaY","deltaZ","width","height","isPrimary","pressure","tangentialPressure","tiltX","tiltY","twist","FederatedMouseEvent","altKey","buttons","client","copyFrom","ctrlKey","metaKey","movement","screen","shiftKey","isTrusted","srcElement","view","which","layer","page","id","overTarget","has","get","pop","NONE","manager","listeners","_events","once","removeListener","call","context"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/events/src/EventBoundary.ts"],"sourcesContent":["import { Point, utils } from '@pixi/core';\nimport { EventsTicker } from './EventTicker';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { EmitterListeners, TrackingData } from './EventBoundaryTypes';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type {\n    Cursor, EventMode, FederatedEventHandler,\n    FederatedEventTarget,\n    IFederatedDisplayObject\n} from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link PIXI.EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link PIXI.EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link PIXI.FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from '@pixi/display';\n * import { EventBoundary } from '@pixi/events';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends DisplayObject\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof PIXI\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     *\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: DisplayObject;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: utils.EventEmitter = new utils.EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all DisplayObjects.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /** Enables the global move events. `globalpointermove`, `globaltouchmove`, and `globalmousemove` */\n    public enableGlobalMoveEvents = true;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link PIXI.EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see PIXI.EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see PIXI.EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see PIXI.EventBoundary#allocateEvent\n     * @see PIXI.EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /** Every interactive element gathered from the scene. Only used in `pointermove` */\n    private _allInteractiveElements: FederatedEventTarget[] = [];\n    /** Every element that passed the hit test. Only used in `pointermove` */\n    private _hitElements: FederatedEventTarget[] = [];\n    /** Whether or not to collect all the interactive elements from the scene. Enabled in `pointermove` */\n    private _isPointerMoveEvent = false;\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: DisplayObject)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link PIXI.EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link PIXI.EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e\n     * @param type\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n        }\n    }\n\n    /**\n     * Finds the DisplayObject that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x\n     * @param y\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): DisplayObject\n    {\n        EventsTicker.pauseUpdate = true;\n        // if we are using global move events, we need to hit test the whole scene graph\n        const useMove = this._isPointerMoveEvent && this.enableGlobalMoveEvents;\n        const fn = useMove ? 'hitTestMoveRecursive' : 'hitTestRecursive';\n        const invertedPath = this[fn](\n            this.rootTarget,\n            this.rootTarget.eventMode,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link PIXI.EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@code e} to all interactive display objects. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `globalpointermove` event.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param targets - The targets to notify.\n     */\n    public all(e: FederatedEvent, type?: string | string[], targets = this._allInteractiveElements): void\n    {\n        if (targets.length === 0) return;\n\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const events = Array.isArray(type) ? type : [type];\n\n        // loop through all interactive elements and notify them of the event\n        // loop through targets backwards\n        for (let i = targets.length - 1; i >= 0; i--)\n        {\n            events.forEach((event) =>\n            {\n                e.currentTarget = targets[i];\n                this.notifyTarget(e, event);\n            });\n        }\n    }\n\n    /**\n     * Finds the propagation path from {@link PIXI.EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target\n     */\n    public propagationPath(target: FederatedEventTarget): FederatedEventTarget[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    protected hitTestMoveRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean,\n        ignore = false\n    ): DisplayObject[]\n    {\n        let shouldReturn = false;\n\n        // only bail out early if it is not interactive\n        if (this._interactivePrune(currentTarget)) return null;\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestMoveRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn,\n                    ignore || pruneFn(currentTarget, location)\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive)\n                    {\n                        if (isInteractive) this._allInteractiveElements.push(currentTarget);\n                        nestedHit.push(currentTarget);\n                    }\n\n                    // store all hit elements to be returned once we have traversed the whole tree\n                    if (this._hitElements.length === 0) this._hitElements = nestedHit;\n\n                    shouldReturn = true;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        if (isInteractiveTarget && isInteractiveTarget) this._allInteractiveElements.push(currentTarget);\n\n        // we don't carry on hit testing something once we have found a hit,\n        // now only care about gathering the interactive elements\n        if (ignore || this._hitElements.length > 0) return null;\n\n        if (shouldReturn) return this._hitElements as DisplayObject[];\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && (!pruneFn(currentTarget, location) && testFn(currentTarget, location)))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Recursive implementation for {@link PIXI.EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The DisplayObject that is to be hit tested.\n     * @param eventMode - The event mode for the `currentTarget` or one of its parents.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the display object.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link PIXI.EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: DisplayObject,\n        eventMode: EventMode,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean\n    ): DisplayObject[]\n    {\n        // Attempt to prune this DisplayObject and its subtree as an optimization.\n        if (this._interactivePrune(currentTarget) || pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n\n        if (currentTarget.eventMode === 'dynamic' || eventMode === 'dynamic')\n        {\n            EventsTicker.pauseUpdate = false;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    this._isInteractive(eventMode) ? eventMode : child.eventMode,\n                    location,\n                    testFn,\n                    pruneFn\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    const isInteractive = currentTarget.isInteractive();\n\n                    if (nestedHit.length > 0 || isInteractive) nestedHit.push(currentTarget);\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        const isInteractiveMode = this._isInteractive(eventMode);\n        const isInteractiveTarget = currentTarget.isInteractive();\n\n        // Finally, hit test this DisplayObject itself.\n        if (isInteractiveMode && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return isInteractiveTarget ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    private _isInteractive(int: EventMode): int is 'static' | 'dynamic'\n    {\n        return int === 'static' || int === 'dynamic';\n    }\n\n    private _interactivePrune(displayObject: DisplayObject): boolean\n    {\n        // If displayObject is a mask, invisible, or not renderable then it cannot be hit directly.\n        if (!displayObject || displayObject.isMask || !displayObject.visible || !displayObject.renderable)\n        {\n            return true;\n        }\n\n        // If this DisplayObject is none then it cannot be hit by anything.\n        if (displayObject.eventMode === 'none')\n        {\n            return true;\n        }\n\n        // If this DisplayObject is passive and it has no interactive children then it cannot be hit\n        if (displayObject.eventMode === 'passive' && !displayObject.interactiveChildren)\n        {\n            return true;\n        }\n\n        // If displayObject is a mask then it cannot be hit directly.\n        if (displayObject.isMask)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object or any of its children cannot pass the hit test at all.\n     *\n     * {@link PIXI.EventBoundary}'s implementation uses the {@link PIXI.DisplayObject.hitArea hitArea}\n     * and {@link PIXI.DisplayObject._mask} for pruning.\n     * @param displayObject\n     * @param location\n     */\n    protected hitPruneFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        if (displayObject.hitArea)\n        {\n            displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (displayObject._mask)\n        {\n            const maskObject = ((displayObject._mask as any).isMaskData\n                ? (displayObject._mask as any).maskObject : displayObject._mask);\n\n            if (maskObject && !maskObject.containsPoint?.(location))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object passes hit testing for the given location.\n     * @param displayObject\n     * @param location\n     * @returns - Whether `displayObject` passes hit testing for `location`.\n     */\n    protected hitTestFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        // If the displayObject is passive then it cannot be hit directly.\n        if (displayObject.eventMode === 'passive')\n        {\n            return false;\n        }\n\n        // If the display object failed pruning with a hitArea, then it must pass it.\n        if (displayObject.hitArea)\n        {\n            return true;\n        }\n\n        if ((displayObject as any).containsPoint)\n        {\n            return (displayObject as any).containsPoint(location) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        type = type ?? e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof IFederatedDisplayObject;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent<UIEvent>>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this.notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this.notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        this._isPointerMoveEvent = true;\n        const e = this.createPointerEvent(from);\n\n        this._isPointerMoveEvent = false;\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered DisplayObject is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const allMethods: string[] = [];\n        const allowGlobalPointerEvents = this.enableGlobalMoveEvents ?? true;\n\n        /* eslint-disable @typescript-eslint/no-unused-expressions */\n        this.moveOnAll ? allMethods.push('pointermove') : this.dispatchEvent(e, 'pointermove');\n        allowGlobalPointerEvents && allMethods.push('globalpointermove');\n\n        // Then pointermove\n        if (e.pointerType === 'touch')\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'touchmove') : this.dispatchEvent(e, 'touchmove');\n            allowGlobalPointerEvents && allMethods.push('globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this.moveOnAll ? allMethods.splice(1, 0, 'mousemove') : this.dispatchEvent(e, 'mousemove');\n            allowGlobalPointerEvents && allMethods.push('globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        if (allMethods.length > 0)\n        {\n            this.all(e, allMethods);\n        }\n        this._allInteractiveElements.length = 0;\n        this._hitElements.length = 0;\n        /* eslint-enable @typescript-eslint/no-unused-expressions */\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the\n     * `{@link PIXI.EventBoundary}'s root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            console.warn('EventBoundary cannot map a non-wheel event as a wheel event');\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: FederatedEventTarget[]): FederatedEventTarget\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: FederatedEventTarget\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target\n            ?? this.hitTest(event.global.x, event.global.y) as FederatedEventTarget\n            ?? this._hitElements[0];\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link PIXI.FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from\n     * @param to\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link PIXI.FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from\n     * @param to\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link PIXI.FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + shiftKey\n     * + global\n     * @param from\n     * @param to\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n        to.screen.copyFrom(from.screen);\n        to.shiftKey = from.shiftKey;\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link PIXI.FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link PIXI.EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link PIXI.EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n        if (!e.currentTarget.isInteractive()) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}