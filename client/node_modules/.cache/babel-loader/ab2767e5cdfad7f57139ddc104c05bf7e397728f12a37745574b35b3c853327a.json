{"ast":null,"code":"import { Filter, CLEAR_MODES } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource.mjs';\nimport { generateBlurVertSource } from './generateBlurVertSource.mjs';\nclass BlurFilterPass extends Filter {\n  constructor(horizontal, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5) {\n    const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n    const fragSrc = generateBlurFragSource(kernelSize);\n    super(vertSrc, fragSrc);\n    this.horizontal = horizontal;\n    this.resolution = resolution;\n    this._quality = 0;\n    this.quality = quality;\n    this.blur = strength;\n  }\n  apply(filterManager, input, output, clearMode) {\n    if (output) {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / output.width * (output.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / output.height * (output.height / input.height);\n      }\n    } else {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height);\n      }\n    }\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    } else {\n      const renderTarget = filterManager.getFilterTexture();\n      const renderer = filterManager.renderer;\n      let flip = input;\n      let flop = renderTarget;\n      this.state.blend = false;\n      filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n      for (let i = 1; i < this.passes - 1; i++) {\n        filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n        this.uniforms.uSampler = flop;\n        const temp = flop;\n        flop = flip;\n        flip = temp;\n        renderer.shader.bind(this);\n        renderer.geometry.draw(5);\n      }\n      this.state.blend = true;\n      filterManager.applyFilter(this, flop, output, clearMode);\n      filterManager.returnFilterTexture(renderTarget);\n    }\n  }\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2;\n    this.strength = value;\n  }\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value;\n    this.passes = value;\n  }\n}\nexport { BlurFilterPass };","map":{"version":3,"names":["BlurFilterPass","Filter","constructor","horizontal","strength","quality","resolution","defaultResolution","kernelSize","vertSrc","generateBlurVertSource","fragSrc","generateBlurFragSource","_quality","blur","apply","filterManager","input","output","clearMode","uniforms","width","height","renderer","passes","applyFilter","renderTarget","getFilterTexture","flip","flop","state","blend","CLEAR_MODES","CLEAR","i","bindAndClear","BLIT","uSampler","temp","shader","bind","geometry","draw","returnFilterTexture","value","padding","Math","abs"],"sources":["/Users/rabiibouhestine/mystuff/BrowserApps/Duels/client/node_modules/@pixi/filter-blur/src/BlurFilterPass.ts"],"sourcesContent":["import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength!: number;\n    public passes!: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param resolution - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}